/*
题目大意：给定一个无重复数字的set，返回所有可能的字典序列
解题思路：很显然的dfs...一次就过了，yeah
  res-最终结果
  tmp-当前结果
  remain-还能放入当前结果的数字序列
*/


class Solution {
public:
    void dfs(vector<vector<int>>& res, vector<int>& tmp, vector<int>& remain){
        if(remain.size() == 0){
            res.push_back(tmp);
            return;
        }
        for(int i = 0; i < remain.size(); i++){
            int num = remain[i];
            tmp.push_back(num);
            remain.erase(remain.begin() + i);
            dfs(res, tmp, remain);
            tmp.pop_back();
            remain.insert(remain.begin() + i, num);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        // if(nums.size() <= 1)
        vector<vector<int>> res;
        vector<int> tmp;
        dfs(res, tmp, nums);
        return res;
    }
};


/*
做这道题的时候，总想起39,40两题，一直想通过当前处理的下标index去做，但是一直卡着，后来看了DISCUSS之后终于明白应该怎么做了：
  每次将当前下标index的数与后面的每一位进行交换，得到当前位的所有可能，然后移动到下一位，再与其后面的数进行交换，依次进行，直到最后一个数。
  这里与39，40主要的区别在于处理过程不同，那两道题目是为了构造tmp，不断地将index之后地数插入tmp里，而这道题则是需要与之后的数不断地交换
*/
class Solution {
public:
    void dfs(vector<vector<int>>& res, vector<int>& nums, int index){ //此index表示当前处理的位置下标
        if(index == nums.size()){ //说明index=0..nums.size()-1均已处理
            res.push_back(nums);
            return;
        }
        for(int i = index; i < nums.size(); i++){ //对于当前位置index，它可能的值是与之后的每个值进行交换所得
            swap(nums[index], nums[i]);
            dfs(res, nums, index + 1);  //这里进入下一层dfs时传入index+1,一定要清楚index的含义，是指当前处理到的位置下标
            swap(nums[index], nums[i]);
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        dfs(res, nums, 0);
        return res;
    }
};


/*看了宋狗的代码之后，惊奇的发现还是宋狗思路跟我一致啊，用一个vector<bool> used标志当前位置是否使用过，不断地对tmp执行push_back操作！！！*/
class Solution {
public:
    void dfs(vector<vector<int>>& res, vector<int>& tmp, vector<int>& nums, vector<bool>& used){
        if(tmp.size() == nums.size()){
            res.push_back(tmp);
            return;
        }
        for(int i = 0; i < nums.size(); i++){
            if(!used[i]){
                used[i] = true;
                tmp.push_back(nums[i]);
                dfs(res, tmp, nums, used);
                tmp.pop_back();
                used[i] = false;
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> tmp;
        vector<bool> used(nums.size(), false);
        
        dfs(res, tmp, nums, used);
        return res;
    }
};


/*
第二次做比较顺利，还是采取spw的方法，利用vector<bool> used存储该位是否已使用
*/
class Solution {
public:
    void dfs(vector<vector<int>>& res, vector<int>& cur, vector<int>& nums, vector<bool>& used){
        if(cur.size() == nums.size()){
            res.push_back(cur);
            return;
        }
        for(int i = 0; i < used.size(); i++){
            if(!used[i]){
                cur.push_back(nums[i]);
                used[i] = true;
                dfs(res, cur, nums, used);
                cur.pop_back();
                used[i] = false;
            }
        }
    }
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> cur;
        vector<bool> used(nums.size(), false);
        
        if(nums.size() < 1) return res;
        dfs(res, cur, nums, used);
        return res;
    }
};
