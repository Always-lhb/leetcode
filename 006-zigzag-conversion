/*
题目大意：将字符串转换成Z字形

解题思路：
定义nrows个string，分别存储转换后的每行，再按行号连接string即可
根据字符下标和方向，找到应存入的string

tips:字符串数组
vector<string> nstring(nrows, ""); // nrows个string with value ""
*/

class Solution {
public:
    string convert(string s, int numRows) {
        string res = "";
        vector<string> nstring(numRows, "");
        int flag = 1; //方向
        int row = 0; //行号
        
                
        if(numRows <= 1)
            return s;
            
        for(int i = 0; i < s.length(); i++){ //对每个字符，添加至对应的字符串
            nstring[row].push_back(s[i]);
            row = row + flag;
            if(row == numRows){ //反向，由下至上
                flag = -1;
                row = numRows - 2;
            }
            if(row == -1){ // 反向，由上至下
                flag = 1;
                row = 1;
            }
        }
        
        for(int i = 0; i < numRows; i++)
            res = res + nstring[i];
        
        return res;
    }
};


/*
第二次做，没有问题，代码更简练了，很好。
*/
class Solution {
public:
    string convert(string s, int numRows) {
        if(s.size() < 2 || numRows == 1) return s;

        string res = "";
        int row = 0, flag = 1;
        vector<string> vs(numRows, "");
        
        for(int i = 0; i < s.size(); i++){
            vs[row] += s[i];
            row += flag;
            if(row == numRows - 1) flag = -1; // last row
            if(row == 0) flag = 1; //first row
        }
        
        for(int i = 0; i < numRows; i++){
            res += vs[i];
        }
        return res;
    }
};


/**************************** JAVA *****************************/

注意点：String[], StringBuilder[], StringBuffer[]需要循环对每个元素进行一遍初始化！

/**
 * leetcode 006
 * 思路：
 *      numRows个StringBuilder存储：对每个字符，找到存放它的StringBuilder，
 *      最后按照下标对所有StringBuilder连接
 *
 * @author lihb
 */
public class ZigZagConversion {

    private static String convert(String s, int numRows) {
        if (numRows < 2) return s;
        
        StringBuilder res = new StringBuilder();
        StringBuilder[] stringBuilders = new StringBuilder[numRows];
        for (int i = 0; i < numRows; i++) {
            stringBuilders[i] = new StringBuilder();
        }
        int row = 0;
        boolean isDown = true;  // 方向是否向下

        for (int i = 0; i < s.length(); i++) {
            if (isDown) {
                stringBuilders[row++].append(s.charAt(i));
                if (row == numRows) {
                    row -= 2;
                    isDown = false;
                }
            } else {
                stringBuilders[row--].append(s.charAt(i));
                if (row == -1) {
                    row += 2;
                    isDown = true;
                }
            }
        }

        for (int i = 0; i < numRows; i++) {
            res.append(stringBuilders[i]);
        }
        return String.valueOf(res);
    }

    public static void main(String[] args) {
        System.out.println(convert("PAYPALISHIRING", 3));
        System.out.println(convert("PAYPALISHIRING", 4));
    }
}

// java版本，一次ac，但是忘记对String[]进行循环初始化了
public String convert(String s, int numRows) {
        if (numRows < 2) return s;

        String result = "";
        String[] strs = new String[numRows];
        for (int i = 0; i < numRows; i++) strs[i] = "";
        boolean isDown = true;
        int index = 0;

        for (int i = 0; i < s.length(); i++) {
            if (isDown) {
                strs[index] = strs[index] + s.charAt(i);
                index++;
                if (index == numRows) {
                    isDown = false;
                    index -= 2;
                }
            } else {
                strs[index] = strs[index] + s.charAt(i);
                index--;
                if (index < 0) {
                    isDown = true;
                    index += 2;
                }
            }
        }

        for (int i = 0; i < numRows; i++) {
            result = result.concat(strs[i]);
        }
        return result;
    }
