/*
题目大意：给定一个矩阵，矩阵元素非负，求出从左上走到右下的最小数之和
解题思路：简单的动归。
  dp[i][j]:从dp[0][0]到dp[i][j]的最小数之和，题目变成求解dp[m-1][n-1]
  dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]);
  初始化：出发点，第一行，第一列
注意的点：无
*/


class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        
        dp[0][0] = grid[0][0];
        for(int j = 1; j < n; j++)
            dp[0][j] = grid[0][j] + dp[0][j-1];
        for(int i = 1; i < m; i++)
            dp[i][0] = grid[i][0] + dp[i-1][0];
            
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++)
                dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]);
        }
        return dp[m-1][n-1];
    }
};


/*
第二次做，很顺利
*/
class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        
        dp[0][0] = grid[0][0];
        for(int i = 1; i < m; i++) dp[i][0] = dp[i-1][0] + grid[i][0];
        for(int j = 1; j < n; j++) dp[0][j] = dp[0][j-1] + grid[0][j];
        
        for(int i = 1; i < m; i++)
            for(int j = 1; j < n; j++)
                dp[i][j] = (min(dp[i-1][j], dp[i][j-1]) + grid[i][j]);
        return dp[m-1][n-1];
    }
};
