/*题目大意：
返回字符串的最长回文子串

解题思路：（Manacher算法）
对字符串预处理，统一奇偶：abba -> #a#b#b#a#
声明辅助数组p，存放以每个字符为中心的最长回文串半径

tips：
&&是短路运算符，对于数组要先判断是否越界*/

class Solution {
public:
    string longestPalindrome(string s) {
        int mx = 0; //右边界
        int id = 0; //中心下标
        
        string pres(2*s.length()+1, '#');
        for(int i = 0; i < s.length(); i++) //预处理
            pres[2*i+1] = s[i];
            
        vector<int> p(pres.length(), 0); //辅助数组p
        for(int i = 0; i < p.size(); i++){
            if(mx > i) // initial p[i] 
                p[i] = min(p[2*id-i], mx-i);
            else
                p[i] = 1;
            
            while(i-p[i]>=0 && i+p[i]<p.size() && pres[i-p[i]]==pres[i+p[i]])
                p[i]++;
            
            if(i+p[i] > mx){ //超过右边界
                mx = i+p[i];
                id = i;
            }
        }
        
        int max_len = 0;
        for(int i = 0; i < p.size(); i++){ //遍历数组p
            if(p[i] > max_len){
                max_len = p[i];
                id = i;
            }
        }
        
        return s.substr((id-max_len+1)/2, max_len-1);
    }
};


/*
第二次刷本题，有印象，但还是没有顺利地做出来，原因主要在于第一次刷本题时没有完全弄清楚。当得到回文串中心id,回文串半径max_len之后，对应于原字符串，
回文子串起始位置为(id-max_len+1)/2，回文子串总长度为max_len-1.
*/
class Solution {
public:
    string longestPalindrome(string s) {
        if(s.size() < 2) return s; //特殊情况判断
        
        int mx = 0, id = 0;
        string pres(2*s.size()+1, '#');
        
        for(int i = 0; i < s.size(); i++){ //预处理
            pres[2*i+1] = s[i];
        }
        
        vector<int> p(pres.size(), 0);
        for(int i = 0; i < p.size(); i++){ //求解辅助数组p
            if(mx > i){
                p[i] = min(p[2*id-i], mx-i);
            }
            else{
                p[i] = 1;
            }
            while(i-p[i] >= 0 && i+p[i] < p.size() && pres[i-p[i]]==pres[i+p[i]])
                p[i]++;
            if(i+p[i] > mx){
                mx = i+p[i];
                id = i;
            }
        }
        
        int max_len = 0;
        for(int i = 0; i < p.size(); i++){
            if(p[i] > max_len){
                max_len = p[i];
                id = i;
            }
        }
        return s.substr((id-max_len+1)/2, max_len-1); //注意这里的返回
    }
};


/******************* JAVA版本 *********************/
比较顺利，注意对字符串预处理，统一奇偶；从处理后的字符串推到原字符串的最长回文串中心下标和长度是难点

/**
 * leetcode 005 最长回文子串
 *
 * 思路：Manacher算法
 *      对字符串预处理，统一奇偶，abba -> #a#b#b#a#
 *      对处理后的字符串找到最长回文子串中心下标index，和回文半径maxLen
 *      对于原字符串，回文子串起始下标为(index - maxLen + 1) / 2，长度为maxLen - 1
 *
 * @author lihb
 */
public class LongestPalindrome {

    public static String longestPalindrome(String s) {
        if (s.length() < 2) return s;

        String pres = preHandle(s);

        int index = 0, maxLen = 1;
        for (int i = 0; i < pres.length(); i++) {
            int len = 1;
            while ((i - len) >= 0 && (i + len) <= pres.length() - 1 && pres.charAt(i - len) == pres.charAt(i + len)) {
                len++;
            }
            if (len > maxLen) {
                index = i;
                maxLen = len;
            }
        }
        return s.substring((index - maxLen + 1) / 2, (index - maxLen + 1) / 2 + maxLen - 1);
    }

    private static String preHandle(String s) {
        char[] res = new char[2 * s.length() + 1];
        for (int i = 0; i < s.length(); i++) {
            res[2 * i] = '#';
            res[2 * i + 1] = s.charAt(i);
        }
        res[2 * s.length()] = '#';
        return String.valueOf(res);
    }

    public static void main(String[] args) {
        System.out.println(longestPalindrome("babad"));
    }
}



/**
 * 思路没问题，难点在于得到index和len之后，得到原字符串对应的子串。
 * 因为tempLen初始化为1，所以可以将(len - 1)看作一个整体
 */
public class LongestPalindrome {

    public String longestPalindrome(String s) {
        if (s.length() < 2) {
            return s;
        }

        String pres = preProcess(s);
        int index = 0, len = 0;
        for (int i = 0; i < pres.length(); i++) {
            int tempLen = 1;
            while ((i - tempLen) >= 0 && (i + tempLen) <= pres.length() - 1 && pres.charAt(i - tempLen) == pres.charAt(i + tempLen)) {
                tempLen++;
            }
            if (tempLen > len) {
                index = i;
                len = tempLen;
            }
        }

        return s.substring((index - (len - 1)) / 2, (index - (len - 1)) / 2 + (len - 1));
    }

    private String preProcess(String s) {
        char[] res = new char[s.length() * 2 + 1];
        for (int i = 0; i < s.length(); i++) {
            res[2 * i] = '#';
            res[2 * i + 1] = s.charAt(i);
        }
        res[res.length - 1] = '#';
        return String.valueOf(res);
    }

    public static void main(String[] args) {
        LongestPalindrome longestPalindrome = new LongestPalindrome();
        System.out.println(longestPalindrome.longestPalindrome("babad"));
    }
}
