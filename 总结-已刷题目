重点题目：43，75

1.TwoSum 返回i,j，使得nums[i]+nums[j]=target，唯一
  对于N-Sum问题，固定一个数，查找另一个数；并利用unordered_map<int, int>使复杂度为O(n)
2.Add Two Numbers 以链表形式实现两数相加
  使用带头结点的结果链表。注意要先求进位再求当前位的值，不然flag恒等于0
3.Longest-substring-without-repeating-characters 返回字符串的无重复字符的最长子串
  遍历找到每个字符起始的最长符合要求子串即可
4.Median-of-two-sorted-arrays 求两个有序数组合并后的中位数
  查找两个有序数列A,B合并后的中位数，转化为查找A,B合并后的第k小数（k根据奇偶而定）
  递归：分别查找A,B的第pa，pb(pb=k-pa)小数
  if(A[pa-1] < B[pb-1]): A[0..pa-1]均属于合并后的前k小数，舍弃
  if(A[pa-1] > B[pb-1]): B[0..pb-1]均属于合并后的前k小数，舍弃
  if(A[pa-1] == B[pb-1]): 命中，返回
  临界条件：假设总有A.size()<=B.size()
  if(A.size() == 0) return B[k-1];
  if(k == 1) return min(A[0], B[0]);
  
  tips:奇偶判断 
  if(a & 0x1) 奇数
  else  偶数
5.Longest-palindromic-substring 求最长回文子串
  Manacher算法
  对字符串预处理，统一奇偶：abba -> #a#b#b#a#
  声明辅助数组p，存放以每个字符为中心的最长回文串半径
  
  当得到回文串中心id,回文串半径max_len之后，对应于原字符串，
  回文子串起始位置为(id-max_len+1)/2，回文子串总长度为max_len-1.
6.Zigzag-conversion 将字符串转换成Z字形
  定义nrows个string，分别存储转换后的每行，再按行号连接string即可
  根据字符下标和方向，找到应存入的string
7.Reverse Integer 整形反转
  public:
    int reverse(int x) {
        long res = 0;
        while(x != 0){
            res = res * 10 + x % 10;
            x /= 10;
        }
        return (res > INT_MAX || res < INT_MIN) ? 0 : res;
    }
  };
8.String to Integer 
  将string转换为integer
  1.忽略string开始的所有空格
  2.正负号可选
  3.正负号后跟尽可能多的数字
  4.数字后面的其他字符忽略即可
  5.integer越界返回INT_MAX或INT_MIN

  ps:
  1.为防止溢出，声明为long
  2.得到res后，直接进行溢出判断
9.Palindrome-number 给定一个int，判定是否为回文数
  对最高位和最低位进行判断，如果相同，去掉这两位继续判断，否则返回false;负数不是回文数
10.Regular-expression-matching 正则匹配，其中'.'代表任何字符，'*'表示前一位字符重复任意次
  f[i][j]: s[0..i-1]与p[0..j-1]是否匹配，问题变成了求解f[s.size()][p.size()]
  f[i][j]:
      if(p[j-1] == '*'): 
          此时p[j-2]+p[j-1]可能表示empty，即去掉p的后两位: f[i][j-2]
          或者p[j-2]+p[j-1]表示>=1个s[i-1]，即去掉s的末位: (s[i-1]==p[j-2]||p[j-2]=='.')&&(f[i-1][j])
      if(p[j-1] != '*'):
          s和p的末位比较且去掉s和p的末位：f[i][j] = (s[i-1] == p[i-1] || p[i-1] == '.') && f[i-1][j-1]
  初始化：
      1.f[0][0] = true;
      2.当p空时，对于s的第i个字符有f[i][0]=false
      3.当s空时，对于p的第j个字符，判断 j > 1 && p[j-1] == '*' && f[0][j-2]
11.Container-with-most-water 给定数组 height,其中height[i]表示坐标轴上的一个点(i, height[i])，对每个点做垂直于x轴的线段，求出两条线段与x轴所代表容器能盛放的最大水量
  首先通过第一个和最后一个点求出widest container，其他container必须比这个container更高才有可能超过它的容量
12.Integer to Roman 将integer类型转换为Roman字符串,假设此ineger大小在0-3999之间
  I:1
  V:5
  X:10
  L:50
  C:100
  D:500
  M:1000
  分别定义4个string数组，对应千百十个位，再将字符串连接即可
13.Roman to Integer
  将罗马数字对应的integer存入map，从个到千判断，若um[s[i]]<um[s[i+1]]，sum-=um[s[i]];否则sum+=um[s[i]]
14.longest-common-prefix 对于vector<string> strs，返回最长共同前缀
  对每一位，遍历整个string数组，如果均相同则加入，否则退出循环
15.3Sum 对给定vector<int>，返回所有的a,b,c，使得a+b+c=0;注意去重
  排序，对给定nums[i],利用卡尺法查找nums[left]+nums[right] = -nums[i]
16.3Sum Closest 对给定vector<int> nums和target，返回nums中的a,b,c，使得a+b+c最接近target；假设只有一组，不需去重。
  排序+卡尺法
17.letter-combinations-of-a-phonenumber 对于输入的数字，按照手机键位，返回所有可能的字符串和
  dfs
18.4Sum
  N-Sum问题：排序+卡尺法
19.remove-nth-node-from-end-of-list 删除链表的倒数第n个节点
  计算出倒数第n个节点是正数第几个，然后求解。注意当去掉的节点是首节点时的特殊判断。
20.valid parentheses 对于由(),[],{}构成的字符串，判断是否符合规范
  栈stack的简单应用
21.merge-two-sorted-list 合并两有序链表
  对两个链表，从起始位置开始判断。链表问题都统一使用带头结点的链表即可。
22.create-parentheses 根据输入的个数n，构造所有符合规则的具有n个'('和n个')'的字符串
  dfs
  left,right分别代表剩余左右括号数目，合法情况下left<=right。
  当left=right=0时：得到一个解，返回；
  当left<right时：如果left>0，插入一个左括号递归，如果right>0，插入一个右括号递归
  当left=right时：只能插入左括号并递归
23.merger-k-sorted-lists 合并k个有序链表
  k路归并->堆priority_queue<>
24.swap-nodes-in-pairs 给定一个链表，交换两个相邻节点的值，返回头指针。如：给定1->2->3->4，要求返回2->1->4->3。要求只能用常数空间。
  每次交换前判断链表是否还有两个节点，如果有就交换这两个节点。需要标注尾节点，将链表连接起来
25.reverse nodes in k-group 给定链表和数字k，以k个节点为一组进行反转
  首先写出链表反转的reverse()函数，然后对原链表作处理，每k个节点翻转一次。
  res:带头结点的结果
  pre:当前段的前一个节点，即上一段的最后一个节点。每k个节点为一段
  head:当前段首节点
  tail:当前段尾节点
26.remove-duplicates from sorted array 对升序数组，去除数组中重复的项，并返回剩余数组长度。确保数组的前len个元素是不重复的，之后的元素无所谓
  用两个指针分别指向当前位置，与当前有效位置。通过i遍历数组，j代表不重复元素的实际位置。
27.remove-element 与上一题基本相同，返回数组中值不为val的元素个数len，只需要保证前len个元素正确即可
  同样，用两个指针分别指向当前位置，与当前有效位置
28.implement strStr 给定两个字符串haystack,needle，返回needle在haystack里的其实下标，如果没有则返回1
  从起始位置开始，对每个合法位置进行遍历。
  kmp算法
29.devide-two-integers 不允许使用/,*,%,计算出两数相除的结果
  位运算，即左移<<和右移>>。左移代表乘2，右移代表除2
  tips:
    将正负号单独处理
    为避免计算过程出现溢出，采用long
    溢出条件有两个：1.divisor == 0  2. dividend == INT_MIN && divisor == -1
30.substring-with-concatenation-of-all-words 给一个字符串，和一堆等长度的单词,在字符串中找出所有单词组成的字串的位置。
  利用map存储words里每个word应该出现的次数，然后对可能的起始位置遍历，利用map2存储从该位置出发，
  实际上每个word出现的次数；如果得到的word不在map里或者word出现的次数过多，说明此位置不满足条件
31.next-permutation 给定一个整数序列，返回该序列的下一个字典序列；如果是降序序列，直接返回升序序列
  对所给序列，从右至左查找，找到第一个index，使得nums[index]<nums[index+1]，如果找不到，说明原序列为降序排序，直接返回升序序列；
  对找到的index,从nums.size()-1遍历到index+1,找到第一个大于nums[index]的i，交换nums[index],nums[i]；
  最后再将nums[index+1..nums.size()-1]逆序即可
32.longest-valid-parentheness 给定一个由'('和')'组成的字符串，返回这个字符串最长合法括号的长度
  声明栈stack<int> st，用于存储所有未匹配的下标，然后利用st求出最长匹配长度
33.search-in-rotated-sorted-array 给定一个数组，它是升序数组在某个位置旋转所得，即012345在3旋转得到345012...返回给定target在数组里的下标
  初始化low=0,high=nums.size()-1,mid=(low+high)/2，如果nums[mid]=target则命中返回；否则mid的左右序列必定有一个是有序的；
  如果nums[mid]<=nums[high]，说明从mid..high是有序的，此时如果target位于mid-high，则low=mid+1,否则high=mid-1;
  如果nums[mid]>=nums[low],说明从low..mid是有序的，此时如果target位于low-mid，则high=mid-1,否则low=mid+1。
  即[l..m]和[m..r]中必有一个有序，按情况更新l或r即可
34.search for a range 给定一个升序数组和target，返回target在数组内的起始和结束位置。要求时间复杂度为O(logn)
  二分法，命中后，通过两个下标分别向前向后扫描数组，返回起始和结束下标
35.search insert position 给定一个升序数组和target，如果在数组内找到target则返回下标，如果没找到则返回target应插入的位置。假设数组内无重复元素
  对于有序数组的位置查找，依然采用二分法解决。
36.valid-sudoku 判断所给的9*9数独表是否合法，空格用'.'代表，空格不需要判断
  分别遍历每行，每列，每个子表，如果都合法则返回true
37.Sudoku Solver 给定一个不完整的数独表，完成数独表填写。假设唯一解
  dfs
  声明函数util(vector<vector<char>>, int pos)，对于位置0..80遍历判断，如果pos>=81说明前81个位置均已放入相应数字，直接返回true
  否则，先得到pos对应的行下标i和列下标j，对于board[i][j]判断，如果不是'.'，直接判断下一位置；
  否则，对于可能放入的9个字符遍历，如果字符c不在i行且不在j列且不在i,j确定的子表内，则将c放入board[i][j]，然后进行下一位置判断；
  注意回溯之后要恢复board。
38.count and say 数和说数列如下：1,11,21,1211,111221..给定一个整数n，生成第n个这样的序列
  循环求解每次所得字符串即可
39.combination-sum 给定一个无重复元素的set集合，和一个int类型的target，求出所有利用set里的元素能构成target的结果。set里的元素可多次使用，结果不能有重复
  先将set排序，然后利用dfs求解
40.combination-sumII 与上一题类似，给定一个集合和目标target，集合里的每个元素只能使用一次，返回所有的结果集合
  与上一题类似，排序+dfs
  tips：本题存在几个需要注意的地方
  1.每个元素只能使用一次，所以回溯时的下标变成i+1
  2.在去重之后，应该有一个判定是否为candidates结尾的判断，否则发生数组越界。神奇的是，本题的所有case在不判断的情况下都能通过，但还是应该注意
41.first missing positive 给定一个无序的数组，找出数组中缺失的第一个正整数。要求算法复杂度为O(n)，使用常数内存空间
  遍历一次数组，对于下标i：如果nums[i]是合法的，将它放到正确的位置上，注意应该使用循环，对换到位置i的元素不断处理。即if(nums[i]==5),将它与nums[4]交换
  然后遍历数组，找到第一个位置上错误的下标i,返回i+1
42.trapping rain water 给定一个非负正数序列，分别表示高度，求出以这些高度为边界所能存储的水量
  1.为了确定每次能够存储的水量，需要维护leftwall,rightwall，分别表示左边墙和右边墙高度
  2.当height[left]<=height[right]时：
    说明此时height[left]一定不大于右边墙，因此将它与左边墙比较，如果height>=heightwall，则更新左边墙高度，否则存水；往右走一格
  3.右边同理，处理完往左走一格
43.multiply strings 非负大整数乘法
  按位计算，迭代。
  1.对于大整数乘法，结果最多可以有num1.size()+num2.size()位
  2.对于num1[i]和num2[j]，他们共同决定结果的res[i+j+1]
  3.对于给定的i，当与所有num2[j]计算结束后，最后一个进位应加入res[i]。可以这样理解，对所有j遍历结束时，j=0，此时共同决定res[i+1]，因此退出循环时最后进位加入res[i]
  4.最后别忘记对res取子串，因为可能结果位数小于num1.size()+num2.size()
44.wildcard matching 通配符匹配，'?'代表单个字符，'*'代表任意字符串，包括空串
  f[i][j]: s[0..i-1]与p[0..j-1]是否匹配，问题转化为求解f[m][n]
  f[i][j]: 
    if(p[j-1] != '*'): 判断s与j的末位是否匹配，去除s与p的末位
    if(p[j-1] == '*'): 
      *可能表示empty，此时仅去除p的末位，f[i][j-1]
      *可能表示>=1个任意字符，此时仅去除s的末位，f[i-1][j]
  初始化：
    1.f[0][0]=true;
    2.p为空时，对于s的第i个字符，都有f[i][0]=false;
    3.s为空时，对于p的第j个字符，判断：p的末位即p[j-1]=='*' && f[0][j-1]
45.jump game II 给定一个非负整数序列，nums[i]表示在i位置能跳跃的最大步数，求出从i=0跳跃到i=nums.size()-1所需的最小步数(假设一定能到达最后)
  贪心算法，对nums遍历，如果i超过了上一跳能到达的最远位置，则跳数+1，并更新上一跳的最远位置为本跳最远位置。如果本跳最远位置超过了序列尾则返回当前跳数
      last-上一跳能到达的最远位置 
      curr-当前跳能到达的最远位置 
      jump-跳数
46.permutation 给定一个无重复数字的set，返回所有可能的字典序列
  dfs,利用vector<bool> used存储该位是否已使用
47.Permutations II 给定可能包含重复值的序列，求出所有可能的字典序
  与上一题几乎一样，多了重复元素的判断，为了判断重复元素，这里加入对nums的排序，使重复元素近邻
48.rotate image 实现n*n矩阵顺时针旋转90度
  对于每个需要旋转的元素，将其放到对应位置 a[i][j]->a[j][n-i-1]->a[n-i-1][n-j-1]->a[n-j-1][i]->a[i][j]
  1. 四个一组，找对应关系
  2. 注意下标控制
49.group anagrams 给定字符串数组，返回所有包含相同字符的字符串
  声明一个key为string，value为vector<string>的map，其中注意对key进行排序
50.Pow(x, n)
class Solution {
public:
    double myPow(double x, int n) {
        double res = 1.0, cur = x;
        
        if(n == 0) return res;
        if(n < 0){
            if(n == INT_MIN) return 1.0 / (myPow(x, INT_MAX) * x);
            else return 1.0 / myPow(x, -n);
        }
        while(n > 0){
            if(n & 0x1) res *= cur;
            cur *= cur;
            n = n >> 1;
        }
        return res;
    }
};
51.N-Queens
52.N-QueensII
  经典问题，dfs。按行进行递归(避免行冲突)，对该行的每个位置，判断是否可以放入皇后，只需进行列/45°/135°三个方向的判定即可
53.Maximum Subarray 给定一个数组，返回数组中子串最大和
  利用currMax存储以nums[i]结尾的最大子串和，如果currMax>max则更新max
54.Spiral Matrix 将给定矩阵螺旋输出
  分别按向右，向下，向左，向上四个方向扫描并存储
55.Jump Game 对给定数组，从位置0出发，判断能否走到最后
  与45题比较。本题更简单，利用curr存储当前跳最远距离。如果最远位置等于下标，说明无法再往前跳，返回false；如果最远位置>=nums.size()-1，说明可以到达
56.Merge Intervals 给定一些时间间隔Interval，合并有重合的Interval
  先按照Interval.start进行升序排序，声明tmp，初始化为intervals[0]，然后遍历剩余元素，进行相应操作。
  注意sort(a.begin(), a.end(), comp)的写法
57.insert intervals 将newInterval插入intervals序列，假设原intervals序列按照Interval.start升序排列
  与上一题基本一致，先将newInterval插入intervals，然后调用上一题代码即可
58.length of last word 求最后一个word的长度
  从右至左遍历，找到第一个非空字符串，返回其长度即可
59.Spiral Matrix II 与54题几乎一致，改读取为填入。给定行数列数n，按照螺旋式填写矩阵
  与54题一致，定义startRow,endRow,startCol,endCol,然后逐个填入num
60.Permutation Sequence 对于给定n，有n!个字典序列，返回第k个序列
  对于[1..n]有n!个n位字典序列，n! = n*(n-1)!。即把n!个字典序列分成n份，每份是剩余n-1个字符组成的(n-1)!个字典序列。
  根据k求出每一位应该填入的字符，循环求出n位字典序列。
61.Rotate List 将链表右移k个位置
  这里的k是可以大于链表长度的，因此先求出链表长度num，然后pos = k % num表示右移的量。
  链表右移：
    声明两个指针pre,cur均指向头节点，先把pre右移pos个位置，然后当pre->next != NULL时，同时右移pre和cur，此时pre指向尾节点，cur->next为
    结果的头节点。
62.Unique Paths 从矩阵左上角走到右下角共有多少条路径
  动态规划。
  res[i][j]：从[0][0]走到[i][j]的路径数，则题目变成求解res[m-1][n-1]
  res[i][j] = res[i-1][j] + res[i][j-1];
  初始化：start位置，第一行，第一列
63.Unique Paths II 与上一题目相似，当obstacleGrid[i][j]=1时表示为障碍物
  用动归解决，当前点若为障碍点，则当前点的方案数为0，否则，到当前点的方案数为它的上边格子和左边格子的方案和
64.Minimum Path Sum 给定一个矩阵，矩阵元素非负，求出从左上走到右下的最小数之和
  解题思路：简单的动归。
  dp[i][j]:从dp[0][0]到dp[i][j]的最小数之和，题目变成求解dp[m-1][n-1]
  dp[i][j] = grid[i][j] + min(dp[i-1][j], dp[i][j-1]);
  初始化：出发点，第一行，第一列
65.Valid Number 判断给定字符串是否是数字
  1.去除s前后的空格，如果s为空，说明原s全部由空格组成，返回false
  2.合法数字可以由'+','-'号开头，但正负号后必须有内容
  3.正负号之后可以跟数字或小数点，但小数点个数不能大于一，数字个数不能为0
  4.如果有指数符号'e'/'E'，同理指数符号后必须有内容
  5.指数符号后可以跟正负号或数字且正负号不能在最后
  6.最终返回index == s.size();即合法数字后不能再有其他不合法符号
  综上：小数点一个，指数符号一个，正负号两个
66.Plus One 一个非负整数由数组表示，数组下标0的位置保存该数最高位，返回该数加1的数
  从后往前遍历数组，对末位执行加1操作，利用flag保存进位
67.Add Binary 二进制加法
  假设a的长度总是不小于b的长度，若b长度为0，直接返回a；否则的话，对于a,b从右向左扫描，当a,b均不为空时，当只有a不为空时
68.Text Justification 给定一个字符串数组和每行长度maxWidth，贪心地把每个字符串放入当前行，每个字符串之间用空格分开，空格平均分布，且当空格不能平均分布时，多余空格
从左往右填入；最后一行，每个字符串之间只放入一个空格，剩下的空格全部填入最后
  对字符串数组遍历，首先计算得到所有能放在当前行的字符串words[i]..words[i+k-1]
  然后对于最后一行，每个字符串之间填入一个空格；对于其他行，按要求填入空格
69.Sqrt(x) 二分法
  int mySqrt(int x) {
        if(x < 2) return x;
        
        int low = 0, high = x;
        while(low <= high){
            int mid = (low + high) / 2;
            int div = x / mid;
            if(div == mid) return mid;
            else if(div < mid) high = mid - 1;
            else low = mid + 1;
        }
        return high;
    }
70.Climbing Stairs 爬梯子，一共需要爬n步，每步可以爬1或2格，求共有多少种爬法
  解题思路：简单的dp
  dp[i]：从0爬到i的不同路径数，问题转化为求解dp[n]
  dp[i] = dp[i-1] + dp[i-2];
  初始化：dp[0] = 1, dp[1] = 1
71.Simplify Path  简化所给的Unix形式的绝对路径
  解题思路：利用stack。
  保存每两个'/'之间的字符串，如果是".."则弹出用栈保存的上一层文件夹，如果是'.'或空则不做处理，如果是字符串则将当前文件夹名压入栈。
  如果栈空则压入'/'，最后利用栈得到结果
72.Edit Distance 给定字符串word1，word2，求从word1变成word2所需的最小步数。每步有三种情况：replace, delete, insert
  解题思路：dp
  dp[i][j]：将word1[0..i-1]变成word2[0..j-1]所需的最小步数，则问题转化为求解dp[m][n]，其中m，n分别为word1和word2的长度
  dp[i][j]：如果word1[i-1]=word2[j-1]，则dp[i][j] = dp[i-1][j-1]
            否则，有三种转换方法:
              replace: dp[i][j] = dp[i-1][j-1] + 1;
              delete:  dp[i][j] = dp[i-1][j] + 1; 即删除word1[i-1]，然后加上word1[0..i-2]变成word2[0..j-1]的步数
              insert:  dp[i][j] = dp[i][j-1] + 1; 即将word1[0..j-1]变成word2[0..j-2]，然后在word1最后填入word2[j-1]
  初始化：对应word1/word2为空的情况，易知分别需要i/j个delete/insert操作
73.Set Matrix Zeroes 对给定矩阵，如果matrix[i][j]为0，则把矩阵的该行和该列全部置0
  解题思路：把每行是否应置0存入该行第一列的元素中，把每列是否应置0存入该列第一行的元素中，这样，对于第一行和第一列都应存入matrix[0][0]，
  所以额外声明flag1,flag2分别存储第一行和第一列是否应置0。然后对除去第一行第一列的矩阵执行置零操作，最后根据标志位对第一行第一列分别置零。
74.Search a 2D Matrix 在有序二维数组里查找target
  解题思路：将二维数组看作一维数组，二分法查找即可
75.Sort Colors 颜色排序，红白蓝分别由012代替，对于给定数组排序
  解题思路：1.快排 2.归并排序 3.声明low,mid,high，low是0的右边界，high是2的左边界，mid用于遍历数组。遇到0，则交换nums[low]和nums[mid]，
  并且low++,mid++，保证mid永远不小于low； 遇到1，则mid++继续扫描；遇到2，则交换nums[mid]和nums[high]，并且high--
         遇到1，则mid++继续扫描；遇到2，则交换nums[mid]和nums[high]，并且high--
76.Minimum Window Substring 给定字符串s和t，返回s中包含t中所有字符的最小子串
  定义两个指针i,j标记左右窗口，当窗口内未包含t中所有字符时，右指针右移，直至包含t中所有字符；这时将左指针右移，直至不再包含所有字符，求出当前子串
  如果当前子串长度小于res，则更新res。重复上述过程，直到字符串尾部
77.Combinations 给定int型n和k，返回1-n中所有k个数的组合
  dfs
78.Subsets 求给定数组的所有子集
  dfs
79.Word Search 对给定的二维字符矩阵board，能否找到字符串word。word可以用board中的相邻字符构成，相邻指的的上下或者左右相邻，相同字符不可以用多次
  dfs
  1.遍历整个board，从word下标位置0开始查找，如果查找到整个word，返回true，否则返回false
  2.查找过程：如果下标为word.size()，说明合法下标0..word.size()-1均已查找完毕，返回true
             如果board的下标i,j不合法或已访问或与查找元素不等，说明当前位置不可用，返回false
             否则，当前位置命中，标记并对于可能的四个下一位置，回溯查找word的下一元素，如果查找成功，返回true
             否则，当前位置的下一位置不可用，去除标记并返回false
    注意的点：1.这里的dfs是bool型，而非void型
             2.index--当前判断的word元素下标
             i,j----当前board的位置
             flag---控制一次访问*/
80.Remove Duplicates from Sorted Array II 类似26题，给定一升序数组，每个数字允许最多出现两次，返回最终数组长度len，只要求前len位顺序正确
  同26题，关键是判断当前数字是否合法，需要一个计数器count
81.Search in Rotated Sorted Arrays II 给定升序数组，数组在某个位置旋转，查询target是否存在，其中数组内元素可重复出现
  对比第33题，整体思路不变，即二分查找，如果mid命中则返回；否则，如果mid..high有序，如果target位于本区间更新low，否则更新high；
  如果low..mid有序，如果target位于本区间更新high,否则更新low；如果nums[mid]==nums[high]，这时由于有重复元素，无法断定哪一边有序，
  例如1,1,3,1和3,1,1两种情况，故此时只对high执行减一操作。
82.Remove Duplicates from Sorted List II 给定一个链表，去除所有重复元素，即对于1->2->2->3，去除后变成1->3
  不断地判定当前节点是否可用，如果不可用直接后移cur，如果可用则执行相应操作
83.Remove Duplicates from Sorted List  与上一题类似，也是删除链表的重复元素，但是允许重复元素剩余一个，即对于1->2->2->3返回1->2->3
  与上一题类似，因为重复元素可以出现一次，所以当不断后移到cur时，cur一定是可用的，因此不需要通过valid进行额外处理
84.Largest Rectangle in Histogram 给定由非负整数构成的数组，数组元素代表高度，求所给数组形成的最大矩形面积
  利用栈stack。栈内保存所有高度递增的下标，即当栈为空或栈顶元素对应高度小于当前高度时，入栈；否则，不断出栈直到栈顶元素对应高度
  小于当前高度，过程中不断计算栈顶元素与当前位置所构成的矩阵面积。
  注意的点：这道题思路确实很难想，最好多练习并记忆。
         1.注意要给heights在末尾填入0
         2.如果出栈后stack为空，说明栈顶元素是数组中高度最小的值，这时它的宽度是i
85.Maximal Rectangle 给定一个由'0'和'1'构成的矩阵，返回矩阵中所有由'1'组成的最大矩形面积
  将题目转换成84题。对于矩阵的每一行，想象沿着当前行横切，由横切面向上的各列代表高度集合，其高度为横切面向上的连续1的个数，则对于当前行，题目转化
  为：给定高度序列，求最大矩形面积，即题目84；对于矩阵的每一行执行上述操作，即可求得本题解。
86.Partition List 给定一个链表和数字x，对链表重新排序，所有值小于x的在前，大于等于x的在后，且这两部分内部各元素位置不变
  声明两个链表respre1,respre2分别存放值小于x的节点和值大于等于x的节点，遍历初始链表每个节点，把节点放入对应的respre1或respre2，
  最后把两个respre2接在respre1后面即可。
87.Scramble string 每个字符串都可以看作由二叉树构成，交换二叉树的两个节点就得到该字符串的一个scramble string。求给定的两个字符串s1,s2是否是scramble string
  解题思路：如果s1==s2则返回true；如果s1和s2中各字符出现次数不同，则返回false，否则，
         把s1,s2分别划分成两部分，a1,a2和b1,b2，如果a1&b1满足条件且a2&b2满足条件，则返回true；如果a1&b2满足条件且a2&b1满足条件，也返回true，否则说明
         双方不是scramble string。
88.Merge sorted array 给定两个有序数组nums1,nums2，两个非负整数m,n分别代表nums1和nums2的初始长度。要求把nums2合并加入nums1，假设nums1足够长。
  对于nums2的每一位，查找其在nums1的位置并插入。如果tmp大于当前nums1的所有值，则直接插入到相应位置；否则，需要把nums1中插入位置之后的各元素后移一位，然后插入tmp。
89.Gray Code 给定非负整数n，求n位格雷码
  解题思路：n位格雷码 = 逆序(n-1位格雷码的第n位置1)...可以n=3举例验证(0,1,3,2,6,7,5,4)
  注意的点：注意格雷码的求解方法，要记住本题。
90.SubsetsII 对给定数组，求出它的所有子集，数组可能包含重复元素
  dfs。与78题对比，多了重复元素判断
91.Decode ways 把字母A..Z编码为数字1..26，对于给定数字串，求出解码方式共有多少种
  解题思路：一开始就想到了动态规划，但是卡在了dp[i]表达式的求解上，后来看了宋狗的答案才明白，求解dp[i]时，要分情况讨论，可能涉及dp[i-1],dp[i-2]。
         dp[i]：s[0..i-1]的解码方式重数，则题目转换为求解dp[m]
         dp[i]：如果s[i-1]==0 && s[i-2]!=1 && s[i-2]!=2，说明数字串不合法，返回0
                否则，求出s[i-1]+10*s[i-2]，即最后两位构成的数字num，
                  如果num<9 || num>26，说明s[i-1]只能作为一位数字单独解码
                  如果num==10 || num==20，说明s[i-1]只能和s[i-2]一起解码
                  否则，s[i-1]即可以单独解码，也可以与s[i-2]一起解码
  注意的点：1.注意dp[i]的求解
         2.注意dp[0]初始化为1，而非0
         3.注意不合法情况判断
92.Reverse Linked List II 给定链表，反转第m到第n的元素
  从左至右遍历链表，其中用leftTail标记需反转链表左边的最后一个节点，midHead标记需反转链表头节点，midTail标记需反转链表尾节点。
93.Restore IP Address 给定由数字构成的字符串，返回所有能构成的ip地址
  解题思路：显然是dfs。
         扫描给定字符串，当前ip串个数为4时，如果恰好当前扫描位置为s.size()，说明已得到的tmp合法，放入res并返回，否则说明不合法，直接返回；
         对当前位置index，当前ip地址串长度可以为1，2，3，得到当前ip地址串，如果合法则放入tmp，利用下一位置构造下一ip串。注意此处应该判断ip串数量
         index:当前扫描到的位置，
         count:当前ip串个数
  注意的点：
         1.isValid函数，判断是否合法时，首先不能有连续0，其次ip串大小应在0..255之间
         2.回溯时，注意对ip串数量即count进行判断
         3.回溯时的条件判断里，一定要有越界判断，不然会超时
94.Binary Tree Inorder Travel 二叉树中序遍历
  熟练掌握
95.Unique Binary Search Tree II 对所给数字n，求出1..n所能构成的所有二叉搜索树
  解题思路：回溯
         sub(left, right)：返回left..right所能构成的所有二叉搜索树；如果left>right则存入NULL并返回，否则，对于left与right之间的任一数i，
         将left..right分为三部分：left..i-1, i, i+1..right，其中第一部分构成i的所有左子树，第三部分构成i的所有右子树；任选一个左子树和一个
         右子树，它们与i共同构成一个解。
96.Unique Binary Search Tree 如上题，给定数字n，求出1..n能构成的二叉排序树个数
  解题思路：一开始想到以上题的方法递归求解，然而本题并没有TreeNode数据类型，显然不应该用这种方法。使用动态规划解决...
         dp[i]: 1..i能够成的二叉排序树个数，求解dp[n]
         dp[i]: 对于1<=j<=i的每个位置，它把1..i分成三部分1..j-1, j, j+1..i，分别求出左子树和右子树个数，相乘得到当前j所能构成的二叉排序树个数
         初始化: dp[0] = dp[1] = 1
97.Interleaving String 给定字符串s1, s2, s3, 求s3是否能由s1, s2交叉构成
  解题思路：动态规划
         dp[i][j]: s1[0..i-1]与s2[0..j-1]能否交叉构成s3[0..i+j-1]，求解dp[m][n]，其中m,n分别为s1,s2的长度
         dp[i][j] = s1[i-1] == s3[i+j-1] && dp[i-1][j] || s2[j-1] == s3[i+j-1] && dp[i][j-1]
         初始化：s1,s2均为空时，s2为空时，s1为空时
98.Validate Binary Search Tree 判断所给二叉树是否是合法的二叉搜索树
  对每个节点进行回溯判断，如果当前节点值合法且左子树和右子树均合法，则返回true，否则返回false
99.Recover Binary Search Tree 二叉搜索树有两个节点值被交换，请换回这两个节点值
  解题思路：二叉搜索树节点值正确的顺序与中序遍历一致，即升序排序。因此中序遍历二叉树，如果前一节点的值>=当前节点值，则找到一个被交换的节点
100.Same Tree 比较给定的两棵二叉树是否相等
  解题思路：递归。当前节点值相同且左右子树都相同则两树相同
101.Symmetric Tree 判断给定二叉树是否是镜像的，即中心对称
  递归。对当前两个根，判断两个根的节点值及左根的左子树与右根的右子树是否相同
102.Binary Tree Level Order Traversal 二叉树层次遍历
  熟练掌握
  利用队列。首先将根节点入队，当队列q不为空时，len=q.size()代表当前层次有效节点数，vector<int>tmp存储当前层次的结果，对于某个节点，如果左子树不为空，则入队，如果右子树不为空，则入队
103.Binary Tree Zigzag Level Order Traversal 二叉树的ZigZag层次遍历，即对奇数层从左往右，偶数层从右往左
  利用栈stack。flag作为方向标志位
104.Maximum Depth of Binary Tree 求二叉树的最大深度，从0开始
  递归。当前二叉树最大深度=左右子树最大深度+1
105.Construct Binary Tree from Preorder and Inorder 通过先序遍历和中序遍历序列构造二叉树。假设序列没有重复元素
  解题思路：先序遍历的首元素是根节点，它把中序遍历序列分割成左右两部分，其中左部分是左子树，右部分是右子树。递归
  注意的点：注意i的取值范围是[l2..r2]，
         当i=l2时，r1<l1，因此tips 1必不可少；
         当i=r2且不满足if条件时，i=r2+1>r2，此时无法构造左右子树，因此要有tips 2
106.Construct Binary Tree from inorder and postorder traversal 根据中序遍历序列和后序遍历序列构造二叉树，假设无重复元素
  与上一题一致，把先序的首元素改为后序的尾元素
107.Binary Tree Level Order Traversal II 二叉树层次遍历，要求结果从下往上，即先存储叶子节点所在层，最后存储根节点所在层
  首先按照正常层次遍历获取结果，然后reverse即可
108.Convert Sorted Array to BST 通过给定的升序数组，构造平衡二叉搜索树
  递归。平衡二叉树的根节点是数组的中间元素，中间元素把数组分成三部分，左边是左子树，右边是右子树。
109.Convert Sorted List to BST 根据升序链表，构造平衡二叉树
  解题思路1：求出链表长度，然后递归构造。注意递归时长度的求解
  解题思路2：把链表转换为序列，利用108的代码求解。整体感觉2比1还要好
110.Balanced Binary Tree 判断给定二叉树是否是平衡树。平衡树定义：左右子树高度差不大于1，且左右子树都是平衡树
  如果root为空，返回true；否则，分别求出左右子树高度，按照定义判断
111.Minimum Depth of Binary Tree 求二叉树的最小深度，即根节点到最近叶子节点的距离
  分别求出左右子树的最小深度l,r，如果有一棵子树深度为0，则返回l+r+1；否则返回min(l,r)+1
112.Path Sum 对给定二叉树和sum，判断是否有一条从根节点到叶子节点的路径，使得路径上的值和恰好等于sum
  dfs。利用num存储当前路径节点值得和，如果是叶子节点，则进行判断，否则，如果有左子树则对左子树进行判断，如果有右子树则对右子树进行判断
113.Path Sum II 与上题类似，本题要求返回所有路径
  dfs。利用res存储最终结果，tmp保存当前路径
114.Flatten Binary Tree to Linked List 按照先序遍历把二叉树转换成链表
  先序遍历。详见注释
115.Distinct Subsequences 求s里有多少个等于t的子串
  解题思路：动态规划。
         dp[i][j]: s[0..i-1]里有多少个t[0..j-1]的子串，求解dp[m][n]
         dp[i][j]: 如果s[i-1]与t[j-1]不同，则s[0..i-1]与s[0..i-2]里包含的t[j-1]个数一致，即dp[i][j]=dp[i-1][j]
                   如果s[i-1]与t[j-1]相同，则s[0..i-1]里包含的t[j-1]个数，需要在dp[i-1][j]的基础上，再加上s,t均去掉最后一位的数目
         初始化：空串是任意字符串的子串
116.Populating Next Right Pointers in Each Node 给定一棵完全二叉树，设置每个节点的next指针指向它右边的结点，如果右边没有节点则设置成NULL.开始时树中所有节点的next值都设成NULL
  解题思路：1.层次遍历。
           2.yyp的思路：对当前根，左子树的next是该根的右子树，该根右子树的next是根的next的左子树
117.Populating Next Right Pointers in Each Node II 给定任意二叉树，将同一层的节点通过next指针向右连接
  二叉树的层次遍历。对于每一层，声明pre代表前一节点，如果pre为空说明cur是当前层首节点，令cur=pre，否则利用next不断向右指
118.Pascal's Triangle 给定行数，构造Pascal三角形
  简单题。Pascal三角形定义：对于每行，首元素和尾元素为1，其余元素为上一行当前列和前一列元素之和
119.Pascal's Triangle II 返回Pascal三角形行下标为rowIndex的行
  与上题基本一致，循环构造Pascal三角形的每一行，如果行号=rowIndex则返回当前行
120.Triangle  对给定三角形，求从三角形顶部到底层的最短路径
  解题思路：动态规划。
         dp[i][j]: triangle[i][j]到底部的最短路径，求解dp[0][0]
         初始化：底层dp[n-1][j]初始化为triangle[i][j]，从下往上求解即可。
121.Best Time to Buy and Sell Stock 给定数组，代表股票在第i天的价格，最多可以进行一次买入和卖出，给出能获得的最大利润
  解题思路：maxProf：最大利润，初始化为0
         minPrice: 当前天之前的最低股票价格，初始化为prices[0]
         循环求解：在第i天卖出股票能到的最大利润即可
122.Best Time to Buy and Sell Stock II 依然是买卖股票，与上一题相比，从一次买卖变成了多次买卖，求最大利润    
  如果当前价格高于前一天的价格，那么价格差即可转化为利润。由于股票的价格曲线应该是一个波浪形曲线，只需要找到每一段上升区间，并将其交易即可。
123.Best Time to Buy and Sell Stock III 依然是股票问题，最多进行两次买卖，求最大利润
  解题思路：假设初始钱为0，hold1：第一次买股票后的钱, ,release1：第一次卖股票后的钱, hold2：第二次买股票后的钱，release2：第二次卖股票后的钱
           对每个位置，更新上述自个量。
  注意的点：一开始从122出发，以为选取最长的两段上升区间求和，实际并非如此。
           对于股票买卖问题，如果给定次数，则可以利用本题思想求解，一次循环；如果不限定次数，利用122题思想求解即可。
124.Binary Tree Maximum Path Sum 求二叉树的最大路径和，可以不经过根节点。节点值可正可负
  递归。求出以每个节点为根的最大路径和，必要时更新maxValue。
125.Valid Palindrome 判断给定字符串是否回文串。只考虑字符串内的字母和数字，不考虑其他字符，且不考虑字母大小写
  对所给字符串做预处理，将大写字母转换为小写字母，并去掉无效字符，然后进行判断即可
126.Word Ladder II 给定起始字符串beginWord，终止字符串endWord，和字典wordList；每次允许改变一个字符，求出从beginWord过渡到endWord的所有最短路径
  解题思路：
         1.利用DFS求出所有可能的路径，然后选出最短的返回。超时
         2.看了老宋他们的解法，利用BFS广度遍历字典，找到字典里每个字符串的层次，再利用DFS从后往前构造路径。超时......
         3.把vector改为set之后可以ac，大概是因为vector的查找复杂度较高
  注意的点：
         1.unordered_map
         2.unordered_set
         3.BFS类似于二叉树的层次遍历，需要借助queue
127.Word Ladder 与上题基本一致，更为简单。只需要返回最短路径长度即可
  解题思路：1. BFS。一开始我的想法是，声明一个队列，利用BFS求解，类似二叉树的层次遍历，unordered_set<string>visited存储已访问的字符串。在q非空的情况下
         循环求解，但是一直超时，三位大神做法也是如此...
         2. 后来，在网上找到一个ac代码，发现它声明的unordered_set<string>visited存储未被访问的字符串，过了，不懂啊...
         3. 将vector转换成unordered_set也可以通过，大概是因为查找时复杂度降低了
128.Longest Consecutive Sequence 给定int数组，返回该数组内最长连续整数的长度
  数组可能包含重复元素，声明unordered_set<int>us存放无重复的元素；对nums进行一次遍历，找到nums[i]在内的连续长度，最后返回最长的长度
129.Sum Root to Leaf Numbers 给定一个二叉树，节点值为0-9，每条从根到叶子节点的路径代表一个数，计算所有数的和
  dfs
130.Surrounded Regions 给定字符'X'和'O'构成的二维数组，把所有由'X'围起来的区域都设置为'X'
  解题思路：dfs。所有位于四条边界的'O'不变，以及由这些'O'能到达的'O'不变
         分别遍历四条边界，如果值为'O'则进入dfs，将可以保留的'O'全部设置为'#'，最后遍历二维数组，把'#'设置为'O'，剩余的设置为'X'
131.Palindrome Partitioning 给定字符串，把它分解成不同回文串组合，返回所有组合
  回溯。index：当前扫描下标，对index之后的所有下标i，如果s[index..i]是回文串，则添入tmp
132.Palindrome Partitioning II 给定字符串，至少需cut几次，使得所有子串全部是回文串。例如"aab"，cut=1，切分为"aa"和'b'
  解题思路：按照131的方法，回溯求得所有划分导致超时。
         这里按照discuss里的方法dp求解：
            pal[i][j]: s[i..j]是否回文
            d[i]: s[i..n-1]的最小cut数，求d[0]
                  if(pal[i][j] == true):
                    if(j==n-1): 说明s[i..n-1]回文，那么d[i]=0
                    else: 对于i..j,j+1..n-1，在j之后切一刀，则d[i] = min(d[i], d[j+1]+1)
133.Clone Graph 无向图的克隆
  无向图的克隆。无向图节点包含标签label和指向其他节点的指针序列neighbors
134.Gas Station 给定一环形道路，道路上有N个加油站，加油站i的油量为gas[i]，从i到i+1耗油cost[i]。如果可以完成整个道路返回起始加油站下标，不能则返回-1
  解题思路：
  1.如果总油量>=总耗油量，则一定可以完成整个道路
  2.如果从A开始，第一个无法到达的点为B，则A与B之间的所有点都无法到达B
  思路：start=0，遍历每个位置，计算总油量与总耗油量，当前油量和当前耗油量，如果当前耗油量大于当前油量，说明start不满足要求，
        则重置当前油量和当前耗油量，并重置start为当前i的下一个位置
135.Candy 给定小朋友序列，每个小朋友有一个等级，给小朋友发糖果，要求每个小朋友至少有一个糖果，且当小朋友等级高于他的邻居时，他的糖果也更多。求至少发多少个糖果
  解题思路：两次扫描。初始时先给每个小朋友一个糖果，从左至右扫描一次，如果当前小朋友等级高于他左边的小朋友，则更新他的糖果数为左边加1；然后从右至左扫描一次，
         如果当前小朋友等级高于他右边的小朋友，则更新他的糖果数为max(candy[i], candy[i+1]+1)
  注意的点：
        1.对于由左右两边限定当前值的题目，分别沿两个方向扫描，满足两个方向的约束
        2.在第二次扫描的时候，要判断candy[i]与candy[i+1]+1的大小。延伸可知，第n次扫描时，需要考虑前n-1次得到的结果
        这个hard题目并不难
136.Single Number 给定整形数组，某个数出现一次，其他数均出现两次，求这个数
  解题思路：
        1.一开始想到利用unordered_map<int, int>来做，存放每个数字出现的次数，然后返回出现一次的数，但是用到额外空间
        2.相同数字异或为0，所以把所有数字异或，剩下的就是只出现一次的数！！！
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res = 0;
        for(int n : nums) res ^= n;
        return res;
    }
};
137.Single Number II 给定数组，某数出现一次，其他数出现三次，求出该数
  解题思路：
        1.利用unordered_map<int, int>存储每个数字出现次数，返回一次的数即可。但利用了额外空间
        2.位运算，将所有数表示成二进制进行计算，其余数均出现三次，说明数值为1的每位上的1出现三次，把出现三次1的位置0，最后所得即为所求。
          one:出现一个1的位，two:出现两个1的位，详见注释
138.Copy of List with Random Pointer 给定一个链表，每个节点有一个random指针，指向链表里的任意节点或null。复制该链表
  一下子就想到了无向图复制133，利用相同思路递归求解，一次通过
139.Word Break 给定非空字符串s和字符串数组wordDict，判断s是否可以由wordDict内的字符串组合而成
  解题思路：一开始想到的是回溯，后来发现应该是动归dp
         1.dp[i]: s[0..i-1]是否能由wordList构成，求解dp[n]
         2.dp[i]: 对于每个合法的j，j把s[0..i-1]分割成s[0..j-1]+s[j..i-1]两部分，第一部分即dp[j]，第二部分即s.substr(j, i-j)，如果这两部分都为true，
                  则dp[i]=true
         3.初始化：dp[0] = true;
  注意的点：把vector转化为unordered_set求解
140.Word Break II  给定非空字符串s和字符串字典wordDict，向s添加空格使得s由字典里的字符串组合而成，返回所有可能的最终结果
  类似于无向图复制的递归解法，从后往前遍历且后面部分word是存在于字典中，即s = remain + word，然后对于remain递归求解
141.Linked List Cycle 判断链表是否有环
  经典老题，通过快慢指针解决。快指针每次走两步，慢指针每次走一步，若有环则快慢指针总会相遇
142.Linked List Cycle II 接上题，如果有环，返回环开始的节点，否则返回NULL
  解题思路：依然定义两个指针fast,slow，fast每次走两步，slow每次走一步，当fast与slow第一次相遇时，重置slow=head，然后fast与slow每次走一步，当fast与slow
         再次相遇时，当前节点就是环开始的节点。
         假设从head到环开始的节点长度为x，第一次相遇时fast在环里走了b，slow在环里走了a，则有：
            x+b = 2(x+a)
            b = a + n*r , r为环的周长
            由上述二式得 x = n*r - a，因此当第一次相遇，把slow重置为head后，到第二次相遇，slow和fast又走过了x即n*r-a，且fast自第一次相遇后由a出发，
            因此第二次相遇时恰位于环的起始位置。
143.Reorder List给定链表1->2->...->n-1->n,将他重排序为1->n->2->n-1->...
  找到链表中点，反转后半部分链表，然后合并即可
144.Binary Tree Preorder Traversal  二叉树先序遍历
  熟练书写
145.Binary Tree Postorder Traversal 二叉树后序遍历
  熟练书写
146.LRU cache 为实现最近最少使用缓冲区设计数据结构。功能包括get和set
  unordered_map + 双向链表
147.Insertion Sort List 利用插入排序对给定链表进行排序
  遍历原链表的每个节点，在新链表里找到插入位置并进行插入
148.Sort List 链表排序，要求时间复杂度O(nlogn)，空间复杂度O(1)  
  上一题考了插入排序，复杂度O(n*n)；快排平均复杂度O(nlogn)；归并排序复杂度总是O(nlogn)
