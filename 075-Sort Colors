/*
题目大意：给定由0,1,2组成的数组，对数组排序，不允许使用sort()
解题思路：声明low,mid,high，low是0的边界，high是2的边界，mid用于遍历数组。遇到0，则交换nums[low]和nums[mid]，并且low++,mid++，保证mid永远不小于low；
         遇到1，则mid++继续扫描；遇到2，则交换nums[mid]和nums[high]，并且high--
*/


class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low = 0, mid = 0, high = nums.size() - 1;
        while(mid <= high){
            if(nums[mid] == 0)
                swap(nums[mid++], nums[low++]);
            else if(nums[mid] == 1)
                mid++;
            else if(nums[mid] == 2)
                swap(nums[mid], nums[high--]);
        }
    }
};


//第二次做，利用快排和归并排序分别实现
/*快排*/
class Solution {
public:
    int partition(vector<int>& nums, int low, int high){
        int pivot = nums[low];
        while(low < high){
            while(low < high && nums[high] >= pivot) high--;
            nums[low] = nums[high];
            while(low < high && nums[low] <= pivot) low++;
            nums[high] = nums[low];
        }
        nums[low] = pivot;
        return low;
    }
    void quickSort(vector<int>& nums, int low, int high){
        if(low < high){
            int pos = partition(nums, low, high);
            quickSort(nums, low, pos - 1);
            quickSort(nums, pos + 1, high);
        }
    }
    void sortColors(vector<int>& nums) {
        return quickSort(nums, 0, nums.size() - 1);
    }
};
/*归并排序*/
class Solution {
public:
    void merge(vector<int>& nums, int low, int mid, int high){
        vector<int> p(nums);
        int i, j, k;
        for(i = low, j = mid + 1, k = low; i <= mid && j <= high; k++){
            if(p[i] <= p[j]) nums[k] = p[i++];
            else nums[k] = p[j++];
        }
        while(i <= mid) nums[k++] = p[i++];
        while(j <= high) nums[k++] = p[j++];
    }
    void mergeSort(vector<int>& nums, int low, int high){
        if(low < high){
            int mid = (low + high) / 2;
            mergeSort(nums, low, mid);
            mergeSort(nums, mid + 1, high);
            merge(nums, low, mid, high);
        }
    }
    void sortColors(vector<int>& nums) {
        return mergeSort(nums, 0, nums.size() - 1);
    }
};
