/*
题目大意：从矩阵左上角走到右下角共有多少条路径
解题思路：动态规划。
  res[i][j]：从[0][0]走到[i][j]的路径数，则题目变成求解res[m-1][n-1]
  res[i][j] = res[i-1][j] + res[i][j-1];
  初始化：start位置，第一行，第一列
注意的点：通过这道题，发现在声明二维数组res时，数组大小要根据不同题意来决定。比如之前的10,44两道题，题目转换成求解f[m][n]，故声明f为(m+1)*(n+1)，本题
则转换成求解res[m-1][n-1]，故声明为m*n的二维数组即可。
*/


class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> res(m, vector<int>(n, 0));
        
        if(m == 1 || n == 1) return 1;
        
        res[0][0] = 0;
        for(int i = 1; i < m; i++)
            res[i][0] = 1;
        for(int j = 1; j < n; j++)
            res[0][j] = 1;
            
        for(int i = 1; i < m; i++){
            for(int j = 1; j < n; j++){
                res[i][j] = res[i-1][j] + res[i][j-1];
            }
        }
        return res[m-1][n-1];
    }
};


/*
第二次做，很顺利，一次AC
*/
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for(int i = 0; i < m; i++) dp[i][0] = 1;
        for(int j = 0; j < n; j++) dp[0][j] = 1;
        
        for(int i = 1; i < m; i++)
            for(int j = 1; j < n; j++)
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
        
        return dp[m-1][n-1];
    }
};
