/*
题目：给定无序数组a, b,合并成升序数组
思路：先将a,b进行快排，然后合并即可
*/
#include<iostream>
#include<vector>
using namespace std;

int partition(vector<int>& nums, int low, int high) { //返回哨兵位置pos
	int pivot = nums[low]; //哨兵
	while (low < high) {
		while (low < high && nums[high] >= pivot) high--;
		nums[low] = nums[high];
		while (low < high && nums[low] <= pivot) low++;
		nums[high] = nums[low];
	}
	nums[low] = pivot;
	return low;
}
void quickSort(vector<int>& nums, int low, int high) { //递归实现nums的快排
	if (low < high) {
		int pos = partition(nums, low, high);
		quickSort(nums, low, pos - 1);
		quickSort(nums, pos + 1, high);
	}
}
void merge(vector<int>& num1, vector<int>& num2, vector<int>& res) {
	int i, j, k;
	for (i = 0, j = 0, k = 0; i < num1.size() && j < num2.size(); k++) {
		if (num1[i] <= num2[j]) res[k] = num1[i++];
		else res[k] = num2[j++];
	}
	while (i < num1.size()) res[k++] = num1[i++];
	while (j < num2.size()) res[k++] = num2[j++];	
}
int main()
{
	int a[] = { 5, 3, 1, 6, 2 };
	int b[] = { 3, 2, 5, 1, 2, 6 };

	vector<int> num1;
	vector<int> num2;
	for (auto n : a) num1.push_back(n);
	for (auto n : b) num2.push_back(n);
	quickSort(num1, 0, 4);
	quickSort(num2, 0, 5);

	vector<int> res(num1.size() + num2.size(), 0);
	merge(num1, num2, res);
	for (auto n : res) {
		cout << n << ' ';
	}

	return 0;
}

/*
题目：实现二进制加法
思路：判断长短，然后按位加即可，注意进位
*/
#include<iostream>
#include<string>
using namespace std;

string addBinary(string a, string b) {
	int flag = 0;
	if (a.size() < b.size()) return addBinary(b, a); //assume len(a) >= len(b)
	if (b.size() == 0) return a;

	int i = a.size() - 1, j = b.size() - 1;
	for (; i >= 0 && j >= 0; i--, j--) {
		int tmp = a[i] - '0' + b[j] - '0' + flag;
		flag = tmp / 2;
		a[i] = tmp % 2 + '0';
	}
	while (i >= 0) {
		int tmp = a[i] - '0' + flag;
		flag = tmp / 2;
		a[i] = tmp % 2 + '0';
		i--;
	}
	if (flag) a.insert(a.begin(), '1');

	return a;
}
int main()
{
	string a = "1101";
	string b = "10110";
	string c = addBinary(a, b);

	cout << c << endl;
	return 0;
}


/*
题目：实现有向带权图结构，并利用dfs实现从图中起点到终点的最长路径，没有该路径则返回-1
思路：dfs
*/
#include<iostream>
#include<vector>
#include<unordered_map>
using namespace std;


struct DirectedGraph {
	char labels[4] = {'A', 'B', 'C', 'D'}; //顶点集
	int matrix[4][4] = { //邻接矩阵，边集
		{ 10, 1, 4, 10 },
		{ 10, 10, 2, 10 },
		{ 10, 10, 10, 1 },
		{ 10, 10, 10, 10 }
	};
};


int res = -1;
vector<char> getNeighbor(DirectedGraph G, char n) { //返回n的所有相邻节点
	vector<char> res;

	int row = n - 'A';
	for (int i = 0; i < 4; i++)
		if (G.matrix[row][i] != 10)
			res.push_back(i + 'A');
	return res;
}
void dfs(DirectedGraph G, vector<bool>& visited, char cur, char end, int sum) {
	if (cur == end) {
		if (sum > res) res = sum;
		return;
	}
	for (auto a : getNeighbor(G, cur)) {
		if (!visited[a - 'A']) {
			visited[a - 'A'] = true;
			int len = G.matrix[cur - 'A'][a - 'A'];
			dfs(G, visited, a, end, sum + len);
			visited[a - 'A'] = false;
		}
	}
}
int getMaxPath(DirectedGraph G, char start, char end) {
	vector<bool> visited(4, false);
	dfs(G, visited, start, end, 0);
	return res;
}

int main()
{
	DirectedGraph G;
	int res = getMaxPath(G, 'A', 'D');
	cout << res;
	return 0;
}


/*
题目：利用整数加法实现整数减法乘法除法
*/
#include<iostream>
using namespace std;

int sub(int a, int b) { // return a - b
	return a + (-b);
}
int mul(int a, int b) { // return a * b
	if (a == 0 || b == 0) return 0;

	bool flag = true;
	if ((a > 0 && b < 0) || (a < 0 && b > 0)) flag = false;

	int num1 = abs(a), num2 = abs(b);
	int res = 0;
	while (num2 > 0) {
		res += num1;
		num2--;
	}
	return flag ? res : -res;
}
int divide(int a, int b) { // return a / b
	if (a == 0) return 0;

	bool flag = true;
	if ((a > 0 && b < 0) || (a < 0 && b > 0)) flag = false;

	int num1 = abs(a), num2 = abs(b);
	int res = 0;
	while (num1 >= num2) {
		long cur = num2;
		int count = 0;
		while (num1 >= cur) {
			count++;
			cur = num2 << count;
		}
		res += 1 << (count - 1);
		num1 -= num2 << (count - 1);
	}
	return flag ? res : -res;
}

int main() 
{
	int a = 10, b = -5;
	cout << sub(a, b) << endl;
	cout << mul(a, b) << endl;
	cout << divide(a, b) << endl;
	return 0;
}

/*
牛客网1
题目：一个字符串如果由两个相同的字符串连接而成，则成为偶串。给定一偶串s，从s的末尾删除1位或多位，求删除后得到的最长偶串长度
思路：偶串的长度必须为偶数，对于所给偶串s，从末尾不断地删除两位，判断剩余部分是否为偶串，如果是则返回当前长度
*/
#include<iostream>
#include<string>
using namespace std;

bool isOuchuan(string s) {
	if (s.size() & 0x1) return false;
	string s1 = s.substr(0, s.size() / 2);
	string s2 = s.substr(s.size() / 2, s.size() / 2);
	if (s1 == s2) return true;
	else return false;
}
int main()
{
	string s;
	cin >> s;
	int len;
	for (len = s.size() - 2; len >= 0; len -= 2) {
		string tmp = s.substr(0, len);
		if (isOuchuan(tmp)) {
			cout << len << endl;
			break;
		}
	}
	return 0;
}


/*
牛客网2
题目：对给定的字符串s，求出s最少可以分割成几个回文串。例如s="abbaa"，则baaab是回文串，返回1；s="abc"，返回3
思路：利用unordered_map<char, int>存储每个字符串对应的数目，奇数字符个数即为所求
*/
#include<iostream>
#include<string>
#include<unordered_map>
using namespace std;

int main()
{
	unordered_map<char, int>dict;
	string s;
	int odd = 0, even = 0;
	cin >> s;
	for (char c : s) dict[c]++;
	for (auto d : dict) {
		if (d.second & 0x1) odd++;
		else even++;
	}
	cout << odd << endl;

	return 0;
}


/*
hihocoder-20-1
题目：给定一棵包含 N 个节点的无根树，如果指定其中某个节点 K 为根，那么每个节点的父节点是谁？
输入：
第一行包含一个整数 N 和 K。1 ≤ N ≤ 1000, 1 ≤ K ≤ N。    
以下N-1行每行包含两个整数 a 和 b，代表ab之间存在一条边。 1 ≤ a, b ≤ N。  
输入保证是一棵树。
输出：
输出一行包含 N 个整数，分别代表1~N的父节点的编号。对于 K 的父节点输出0。

样例输入
5 4  
1 2  
3 1  
4 3  
5 1
样例输出
3 1 4 0 1

思路：类似bfs，利用队列queue求解，先放入根节点，逐层求出该节点的父亲节点即可。
*/
#include<iostream>
#include<vector>
#include<unordered_map>
#include<queue>
using namespace std;

int main()
{
	int N, K;
	cin >> N >> K;

	unordered_map<int, vector<int>> dict; 
	unordered_map<int, int> parent;
	unordered_map<int, bool> visited;
	queue<int> q;
	for (int i = 1; i < N; i++) {
		visited[i] = false;
		int a, b;
		cin >> a >> b;
		dict[a].push_back(b);
		dict[b].push_back(a);
	}
	parent[K] = 0;
	visited[K] = true;
	q.push(K);
	while (!q.empty()) {
		int tmp = q.front();
		q.pop();
		for (int i : dict[tmp]) {
			if (!visited[i]) {
				visited[i] = true;
				q.push(i);
				parent[i] = tmp;
			}
		}
	}
	for (int i = 1; i <= N; i++)
		cout << parent[i] << ' ';
	cout << endl;

	return 0;
}


/*
网易1：01串判定
题目：给定只包含0和1的字符串，返回该字符串中最长01串（01串：0和1交替出现）
思路：遍历字符串，比较当前位与上一位是否不同，如果不同则对cur执行加1操作，否则将cur置1
#include<iostream>
#include<string>
using namespace std;

int func(string s) {
	int res = 0;
	if (s.size() <= 1) return s.size();

	char tmp = '-1';
	int cur = 0;
	for (int i = 0; i < s.size(); i++) {
		char c = s[i];
		if (c != tmp) {
			cur++;
			tmp = c;
		}
		else {
			cur = 1;
			tmp = c;
		}
		res = (cur > res) ? cur : res;
	}
	return res;
}
int main()
{
	string s;
	cin >> s;
	
	int result = func(s);
	cout << result << endl;

	return 0;
}
*/

/*
网易3：疯狂队列
题目：对给定整数队列，求出相邻元素差值和的最大值
思路：将最大最小值依次相隔放入辅助数组，再把最后一个数放入首位即可
#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;

int func(vector<int>& nums) {
	sort(nums.begin(), nums.end());
	vector<int> b;
	int i = 0, j = nums.size() - 1;
	if (nums.size() & 0x1) {
		while (i < j) {
			b.push_back(nums[i++]);
			b.push_back(nums[j--]);
		}
		b.push_back(nums[i]);
		
	}
	else {
		while (i < j) {
			b.push_back(nums[i++]);
			b.push_back(nums[j--]);
		}
	}
	int pre = b[nums.size() - 1], res = 0;
	for (int i = 0; i < b.size() - 1; i++) {
		int high = abs(b[i] - pre);
		pre = b[i];
		res += high;
	}
	return res;
}
int main()
{
	int n;
	cin >> n;
	vector<int> nums(n, 0);
	for (int i = 0; i < n; i++) cin >> nums[i];

	int res = func(nums);
	cout << res << endl;
	return 0;
}
*/
