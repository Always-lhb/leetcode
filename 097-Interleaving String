/*
题目大意：给定字符串s1, s2, s3, 求s3是否能由s1, s2交叉构成
解题思路：动态规划
         dp[i][j]: s1[0..i-1]与s2[0..j-1]能否交叉构成s3[0..i+j-1]，求解dp[m][n]，其中m,n分别为s1,s2的长度
         dp[i][j] = s1[i-1] == s3[i+j-1] && dp[i-1][j] || s2[j-1] == s3[i+j-1] && dp[i][j-1]
         初始化：s1,s2均为空时，s2为空时，s1为空时
注意的点：一开始想的就是动态规划，后来莫名其妙想到dfs去了...
*/

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int m = s1.size(), n = s2.size();
        if(s3.size() != m + n) return false;
        if(s1.empty()) return s2 == s3;
        if(s2.empty()) return s1 == s3;
        
        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));
        dp[0][0] = true;
        for(int i = 0; i < m; i++){
            if(s1[i] == s3[i]) dp[i+1][0] = true;
            else break;
        }
        for(int j = 0; j < n; j++){
            if(s2[j] == s3[j]) dp[0][j+1] = true;
            else break;
        }
        
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                dp[i][j] = (s1[i-1] == s3[i+j-1] && dp[i-1][j]) || (s2[j-1] == s3[i+j-1] && dp[i][j-1]);
            }
        }
        return dp[m][n];
    }
};
