/*
题目大意：非负大整数乘法
解题思路：按位计算，迭代。
  思路没问题，lbc和yyp也是这个思路，但是开始自己总想不通具体写法，结合DISCUSS之后，才彻底弄明白
  1.对于大整数乘法，结果最多可以有num1.size()+num2.size()位
  2.对于num1[i]和num2[j]，他们共同决定结果的res[i+j+1]
  3.对于给定的i，当与所有num2[j]计算结束后，最后一个进位应加入res[i]。可以这样理解，对所有j遍历结束时，j=0，此时共同决定res[i+1]，因此退出循环时最后进位加入res[i]
  4.最后别忘记对res取子串，因为可能结果位数小于num1.size()+num2.size()
*/


class Solution {
public:
    string multiply(string num1, string num2) {
        if(num1 == "0" || num2 == "0") return "0";
        
        string res(num1.size()+num2.size(), '0');
        
        for(int i = num1.size() - 1; i >= 0; i--){
            int carry = 0; // 进位
            for(int j = num2.size() - 1; j >= 0; j--){
                int tmp = (res[i+j+1]-'0') + (num1[i]-'0')*(num2[j]-'0') + carry;
                res[i+j+1] = tmp % 10 + '0';
                carry = tmp / 10;
            }
            res[i] += carry;
        }
        
        int i = 0;
        for(; i < res.size(); i++){
            if(res[i] != '0')
                break;
        }
        return res.substr(i);
    }
};


/*
第二次做，不是很顺利，但是加深了印象。需要练习
*/
class Solution {
public:
    string multiply(string num1, string num2) {
        if(num1 == "0" || num2 == "0") return "0";
        
        string res(num1.size() + num2.size(), '0');
        for(int i = num2.size() - 1; i >= 0; i--){ //外层循环num2，与自身做乘法的计算顺序一致，加深理解
            int carry = 0;
            for(int j = num1.size() - 1; j >= 0; j--){
                int tmp = (res[i+j+1] - '0') + (num2[i] - '0') * (num1[j] - '0') + carry;
                res[i+j+1] = (tmp % 10) + '0';
                carry = tmp / 10;
            }
            res[i] += carry;
        }
        int i = 0;
        for(; i < res.size(); i++){
            if(res[i] != '0')
                break;
        }
        return res.substr(i);
    }
};
