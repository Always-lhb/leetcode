/*
题目：给定无序数组a, b,合并成升序数组
思路：先将a,b进行快排，然后合并即可
*/
#include<iostream>
#include<vector>
using namespace std;

int partition(vector<int>& nums, int low, int high) { //返回哨兵位置pos
	int pivot = nums[low]; //哨兵
	while (low < high) {
		while (low < high && nums[high] >= pivot) high--;
		nums[low] = nums[high];
		while (low < high && nums[low] <= pivot) low++;
		nums[high] = nums[low];
	}
	nums[low] = pivot;
	return low;
}
void quickSort(vector<int>& nums, int low, int high) { //递归实现nums的快排
	if (low < high) {
		int pos = partition(nums, low, high);
		quickSort(nums, low, pos - 1);
		quickSort(nums, pos + 1, high);
	}
}
void merge(vector<int>& num1, vector<int>& num2, vector<int>& res) {
	int i, j, k;
	for (i = 0, j = 0, k = 0; i < num1.size() && j < num2.size(); k++) {
		if (num1[i] <= num2[j]) res[k] = num1[i++];
		else res[k] = num2[j++];
	}
	while (i < num1.size()) res[k++] = num1[i++];
	while (j < num2.size()) res[k++] = num2[j++];	
}
int main()
{
	int a[] = { 5, 3, 1, 6, 2 };
	int b[] = { 3, 2, 5, 1, 2, 6 };

	vector<int> num1;
	vector<int> num2;
	for (auto n : a) num1.push_back(n);
	for (auto n : b) num2.push_back(n);
	quickSort(num1, 0, 4);
	quickSort(num2, 0, 5);

	vector<int> res(num1.size() + num2.size(), 0);
	merge(num1, num2, res);
	for (auto n : res) {
		cout << n << ' ';
	}

	return 0;
}

/*
题目：实现二进制加法
思路：判断长短，然后按位加即可，注意进位
*/
#include<iostream>
#include<string>
using namespace std;

string addBinary(string a, string b) {
	int flag = 0;
	if (a.size() < b.size()) return addBinary(b, a); //assume len(a) >= len(b)
	if (b.size() == 0) return a;

	int i = a.size() - 1, j = b.size() - 1;
	for (; i >= 0 && j >= 0; i--, j--) {
		int tmp = a[i] - '0' + b[j] - '0' + flag;
		flag = tmp / 2;
		a[i] = tmp % 2 + '0';
	}
	while (i >= 0) {
		int tmp = a[i] - '0' + flag;
		flag = tmp / 2;
		a[i] = tmp % 2 + '0';
		i--;
	}
	if (flag) a.insert(a.begin(), '1');

	return a;
}
int main()
{
	string a = "1101";
	string b = "10110";
	string c = addBinary(a, b);

	cout << c << endl;
	return 0;
}


/*
题目：实现有向带权图结构，并利用dfs实现从图中起点到终点的最长路径，没有该路径则返回-1
思路：dfs
*/
#include<iostream>
#include<vector>
#include<unordered_map>
using namespace std;


struct DirectedGraph {
	char labels[4] = {'A', 'B', 'C', 'D'}; //顶点集
	int matrix[4][4] = { //邻接矩阵，边集
		{ 10, 1, 4, 10 },
		{ 10, 10, 2, 10 },
		{ 10, 10, 10, 1 },
		{ 10, 10, 10, 10 }
	};
};


int res = -1;
vector<char> getNeighbor(DirectedGraph G, char n) { //返回n的所有相邻节点
	vector<char> res;

	int row = n - 'A';
	for (int i = 0; i < 4; i++)
		if (G.matrix[row][i] != 10)
			res.push_back(i + 'A');
	return res;
}
void dfs(DirectedGraph G, vector<bool>& visited, char cur, char end, int sum) {
	if (cur == end) {
		if (sum > res) res = sum;
		return;
	}
	for (auto a : getNeighbor(G, cur)) {
		if (!visited[a - 'A']) {
			visited[a - 'A'] = true;
			int len = G.matrix[cur - 'A'][a - 'A'];
			dfs(G, visited, a, end, sum + len);
			visited[a - 'A'] = false;
		}
	}
}
int getMaxPath(DirectedGraph G, char start, char end) {
	vector<bool> visited(4, false);
	dfs(G, visited, start, end, 0);
	return res;
}

int main()
{
	DirectedGraph G;
	int res = getMaxPath(G, 'A', 'D');
	cout << res;
	return 0;
}


/*
题目：利用整数加法实现整数减法乘法除法
*/
#include<iostream>
using namespace std;

int sub(int a, int b) { // return a - b
	return a + (-b);
}
int mul(int a, int b) { // return a * b
	if (a == 0 || b == 0) return 0;

	bool flag = true;
	if ((a > 0 && b < 0) || (a < 0 && b > 0)) flag = false;

	int num1 = abs(a), num2 = abs(b);
	int res = 0;
	while (num2 > 0) {
		res += num1;
		num2--;
	}
	return flag ? res : -res;
}
int divide(int a, int b) { // return a / b
	if (a == 0) return 0;

	bool flag = true;
	if ((a > 0 && b < 0) || (a < 0 && b > 0)) flag = false;

	int num1 = abs(a), num2 = abs(b);
	int res = 0;
	while (num1 >= num2) {
		long cur = num2;
		int count = 0;
		while (num1 >= cur) {
			count++;
			cur = num2 << count;
		}
		res += 1 << (count - 1);
		num1 -= num2 << (count - 1);
	}
	return flag ? res : -res;
}

int main() 
{
	int a = 10, b = -5;
	cout << sub(a, b) << endl;
	cout << mul(a, b) << endl;
	cout << divide(a, b) << endl;
	return 0;
}
