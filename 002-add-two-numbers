/**
题目大意：以链表形式实现两数相加
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 解题思路：
 1. 别忘记链表后移 l1 = l1->next;
 2. 别忘记最后的进位
 3. 指针声明 ListNode * resList = NULL, *currNode = NULL, * nextNode = NULL，其中resList为最后结果链表，currNode指向尾节点，nextNode指向新节点
*/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *resList = NULL, *currNode = NULL, *nextNode = NULL;
        int flag = 0;
        while(l1 != NULL && l2 != NULL){
            nextNode = new ListNode(l1->val + l2->val + flag); //return type of new is a ptr
            flag = nextNode->val / 10;
            nextNode->val = nextNode->val % 10;
            
            if(resList == NULL) //first node
                resList = currNode = nextNode;
            else{
                currNode->next = nextNode;
                currNode = nextNode;
            }
            l1 = l1->next;
            l2 = l2->next;
        }
        while(l1 != NULL){
            nextNode = new ListNode(l1->val + flag);
            flag = nextNode->val / 10;
            nextNode->val = nextNode->val % 10;
            currNode->next = nextNode;
            currNode = nextNode;
            l1 = l1->next;
        }
        while(l2 != NULL){
            nextNode = new ListNode(l2->val + flag);
            flag = nextNode->val / 10;
            nextNode->val = nextNode->val % 10;
            currNode->next = nextNode;
            currNode = nextNode;
            l2 = l2->next;
        }
        if(flag){//last flag
            nextNode = new ListNode(flag);
            currNode->next = nextNode;
            currNode = nextNode;
        }
        return resList;
    }
};


/*
第二次做，比较顺利，使用带头结点的结果链表。注意要先求进位再求当前位的值，不然flag恒等于0
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l2 == NULL) return l1;
        if(l1 == NULL) return l2;
        
        ListNode *head = new ListNode(0);
        ListNode *tail = head;
        int flag = 0;
        
        while(l1 != NULL && l2 != NULL){
            ListNode *tmp = new ListNode(l1->val + l2->val + flag);
            flag = tmp->val / 10;
            tmp->val = tmp->val % 10;
            
            tail->next = tmp;
            tail = tmp;
            
            l1 = l1->next;
            l2 = l2->next;
        }
        while(l1 != NULL){
            ListNode *tmp = new ListNode(l1->val + flag);
            flag = tmp->val / 10;
            tmp->val = tmp->val % 10;

            tail->next = tmp;
            tail = tmp;
            l1 = l1->next;
        }
        while(l2 != NULL){
            ListNode *tmp = new ListNode(l2->val + flag);
            flag = tmp->val / 10;
            tmp->val = tmp->val % 10;

            tail->next = tmp;
            tail = tmp;
            l2 = l2->next;
        }
        if(flag){
            ListNode *tmp = new ListNode(flag);
            tail->next = tmp;
        }
        return head->next;
    }
};
