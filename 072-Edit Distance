/*
题目大意：给定字符串word1，word2，求从word1变成word2所需的最小步数。每步有三种情况：replace, delete, insert
解题思路：dp
  dp[i][j]：将word1[0..i-1]变成word2[0..j-1]所需的最小步数，则问题转化为求解dp[m][n]，其中m，n分别为word1和word2的长度
  dp[i][j]：如果word1[i-1]=word2[j-1]，则dp[i][j] = dp[i-1][j-1]
            否则，有三种转换方法:
              replace: dp[i][j] = dp[i-1][j-1] + 1;
              delete:  dp[i][j] = dp[i-1][j] + 1; 即删除word1[i-1]，然后加上word1[0..i-2]变成word2[0..j-1]的步数
              insert:  dp[i][j] = dp[i][j-1] + 1; 即将word1[0..j-1]变成word2[0..j-2]，然后在word1最后填入word2[j-1]
  初始化：对应word1/word2为空的情况，易知分别需要i/j个delete/insert操作
注意的点：本题要想到dp挺不容易，反正我第一次没想到，看了DISCUSS才恍然大悟。另外就是注意理解dp[i][j]的计算
*/

class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size(), n = word2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        
        dp[0][0] = 0;
        for(int i = 1; i <= m; i++)
            dp[i][0] = i;
        for(int j = 1; j <= n; j++)
            dp[0][j] = j;
        
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(word1[i-1] == word2[j-1])
                    dp[i][j] = dp[i-1][j-1];
                else
                    dp[i][j] = min(dp[i-1][j-1] + 1, min(dp[i-1][j] + 1, dp[i][j-1] + 1));
            }
        }
        return dp[m][n];
    }
};

/*
第二次做，踩了几个坑，但自己想到了dp，有进步
1. dp的大小
2. m=0或n=0的特殊情况
3. word1[i-1] != word2[j-1]时dp[i][j]的表示
*/
class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size(), n = word2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        
        if(m == 0) return n;
        if(n == 0) return m;
        
        dp[0][0] = 0;
        for(int i = 1; i <= m; i++) dp[i][0] = i;
        for(int j = 1; j <= n; j++) dp[0][j] = j;
        
        for(int i = 1; i <= m; i++){
            for(int j = 1; j <= n; j++){
                if(word1[i-1] == word2[j-1]) dp[i][j] = dp[i-1][j-1];
                else dp[i][j] = min(dp[i-1][j-1] + 1, min(dp[i-1][j] + 1, dp[i][j-1] + 1));
            }
        }
        return dp[m][n];
    }
};
