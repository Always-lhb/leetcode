/*
题目大意：返回字符串的无重复字符的最长子串

解题思路：暴力解法，遍历得到每个字符开头的最长子串即可
*/

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int max_len;
        string curr = "";
        int is_first = true;
        
        if(s.length() <= 1)
            return s.length();
        for(int i = 0; i < s.length(); i++){ //遍历，得到每个字符开头的最长子串
            curr.push_back(s[i]);
            for(int j = i+1; j < s.length(); j++){
                if(curr.find(s[j]) == -1)
                    curr.push_back(s[j]);
                else
                    break;
            }
            if(is_first){
                max_len = curr.length();
                is_first = false;
            }
            if(curr.length() > max_len)
                max_len = curr.length();
            curr = "";
        }
        return max_len;
    }
};


/*
第二次做，比较顺利。遍历找到每个字符起始的最长符合要求子串即可
*/
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        if(s.size() < 2) return s.size();
        
        int res = 0;
        string subs = "";
        for(int i = 0; i < s.size(); i++){
            for(int j = i + 1; j < s.size(); j++){
                subs = s.substr(i, j - i);
                if(subs.find(s[j]) != -1){
                    break;
                }
                else{
                    subs += s[j]; //注意这里不能忘记
                }
            }
            res = max(res, int(subs.size()));
        }
        return res;
    }
};


****************************
JAVA版本

/**
 * leetcode 003
 * 思路：定义两个下标指针start,end
 * 如果s[start, end-1]包含s[end]，说明找到了一个不包含重复字符的子串s[start, end-1]，更新结果；否则，end往后移动一位
 * 当end=s.length()时，若s[start, end-1]仍旧不包括s[end]，需要将当前子串长度加1，并更新结果
 *
 * @author lihb
 */
public class LengthOfLongestSubstring {

    public int lengthOfLongestSubstring(String s) {
        if (s == null || s.length() == 0) return 0;
        int start = 0, end = 1;
        int res = 1;

        while (end < s.length()) {
            String sub = s.substring(start, end);
            if (sub.indexOf(s.charAt(end)) != -1) {
                res = res < sub.length() ? sub.length() : res;
                start++;
            } else {
                end++;
                if (end == s.length()) {
                    res = res < sub.length() + 1 ? sub.length() + 1 : res;
                    break;
                }
            }
        }
        return res;
    }
}
