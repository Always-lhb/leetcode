/*
题目大意：给定一个链表，交换两个相邻节点的值，返回头指针。如：给定1->2->3->4，要求返回2->1->4->3。要求只能用常数空间。
解题思路：每次交换前判断链表是否还有两个节点，如果有就交换这两个节点。
tips：思路没问题，第一次提交没过，看了yyp的注释后发现忘记标记每次交换后的尾节点了，需要标注尾节点，将链表连接起来
*/


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(head == NULL || head->next == NULL)
            return head;
        
        bool is_first = true;
        ListNode *first = head;
        ListNode *curr = head;
        while(first && first->next){
            if(is_first){ // decide head
                head = first->next;
                is_first = false;
            }
            
            ListNode *second = first->next;
            curr->next = second;
            first->next = second->next;
            second->next = first;
            
            curr = first; // 尾节点
            first = first->next; //next first_node
        }
        
        return head;
    }
};


/*
第二次做，由于先做了25题，回过头来看本题，是25题在k=2时的特殊情况。故使用两种方法解决本题，一种直接利用25题代码，另一种与25题思路一致的带头节点链表
*/
class Solution { //直接使用25题代码
public:
    ListNode* reverse(ListNode *head){
        ListNode *res = NULL;
        while(head){
            ListNode * nex = head->next;
            head->next = res;
            res = head;
            head = nex;
        }
        return res;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(k < 2) return head;
        
        ListNode *res = new ListNode(0);
        ListNode *pre = res;
        res->next = head;
        
        while(head){
            ListNode *tail = head;
            for(int i = 1; i < k; i++){
                tail = tail->next;
                if(tail == NULL){ //不足k个，则连接前一段和本段，直接返回
                    pre->next = head;
                    return res->next;
                }
            }
            ListNode *nex = tail->next; //下一段首节点
            tail->next = NULL;
            pre->next = reverse(head);
            pre = head;
            head = nex;
        }
        return res->next;
    }
    ListNode* swapPairs(ListNode* head) {
        return reverseKGroup(head, 2);
    }
};


class Solution { //带头结点的链表，与25题思路一致
public:
    ListNode* swapPairs(ListNode* head) {
        if(head == NULL || head->next == NULL) return head;
        
        ListNode *res = new ListNode(0);
        ListNode *pre = res;
        res->next = head;
        
        while(head){
            ListNode *second = head->next;
            if(second == NULL){
                pre->next = head;
                return res->next;
            }
            head->next = second->next;
            second->next = head;
            pre->next = second;
            
            pre = head;
            head = head->next;
        }
        return res->next;
    }
};
