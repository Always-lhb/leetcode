/*
题目大意：返回两个有序数组的中位数

解题思路：
查找两个有序数列A,B合并后的中位数，转化为查找A,B合并后的第k小数（k根据奇偶而定）
递归：分别查找A,B的第pa，pb(pb=k-pa)小数
  if(A[pa-1] < B[pb-1]): A[0..pa-1]均属于合并后的前k小数，舍弃
  if(A[pa-1] > B[pb-1]): B[0..pb-1]均属于合并后的前k小数，舍弃
  if(A[pa-1] == B[pb-1]): 命中，返回
临界条件：假设总有A.size()<=B.size()
  if(A.size() == 0) return B[k-1];
  if(k == 1) return min(A[0], B[0]);
  
tips:奇偶判断 
if(a & 0x1) 奇数
else  偶数
*/

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        double res, res1, res2;
        int total_len = nums1.size() + nums2.size();
        if(total_len & 0x1)
            res = find_k_min(nums1, nums1.size(), nums2, nums2.size(), (nums1.size() + nums2.size())/2+1);
        else{
            res1 = find_k_min(nums1, nums1.size(), nums2, nums2.size(), (nums1.size() + nums2.size())/2);
            res2 = find_k_min(nums1, nums1.size(), nums2, nums2.size(), (nums1.size() + nums2.size())/2+1);
            res = (res1 + res2)/2.0;
        }
        return res;
    }
    double find_k_min(vector<int>& nums1, int m, vector<int>& nums2, int n, int k){
        if(m > n) // always assume len1<=len2
            return find_k_min(nums2, n, nums1, m, k);
        if(m == 0)
            return nums2[k-1];
        if(k == 1)
            return min(nums1[0], nums2[0]);
        int pos1 = min(k/2, m);
        int pos2 = k - pos1;
        if(nums1[pos1-1] < nums2[pos2-1]){
            vector<int> nums3(nums1.begin()+pos1, nums1.end());
            return find_k_min(nums3, m-pos1, nums2, n, k-pos1);
        }
        else if(nums1[pos1-1] > nums2[pos2-1]){
            vector<int> nums4(nums2.begin()+pos2, nums2.end());
            return find_k_min(nums1, m, nums4, n-pos2, k-pos2);
        }
        else
            return nums1[pos1-1];
    }
};


/*
第二次做，遇到的问题如下：
  1、需假设总有l1<=l2
  2、l1==0的判断应该在k==1的判断之前，不然会产生数组越界：即在l1==0的情况下返回nums1[0]
*/
class Solution {
public:
    double findLeastKNum(vector<int>& nums1, int l1, vector<int>& nums2, int l2, int k){
        if(l1 > l2) return findLeastKNum(nums2, l2, nums1, l1, k); // tips1
        
        if(l1 == 0) return nums2[k-1]; //tips2
        if(k == 1) return min(nums1[0], nums2[0]);

        int p1 = min(k/2, l1);
        int p2 = k -p1; //tips3
        if(nums1[p1 - 1] < nums2[p2 - 1]){
            vector<int> nums3(nums1.begin() + p1, nums1.end());
            return findLeastKNum(nums3, nums3.size(), nums2, nums2.size(), k-p1);
        }
        else if(nums1[p1 - 1] > nums2[p2 - 1]){
            vector<int> nums4(nums2.begin() + p2, nums2.end());
            return findLeastKNum(nums1, nums1.size(), nums4, nums4.size(), k-p2);
        }
        else{
            return nums1[p1 - 1];
        }
    }
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        double res, res1, res2;
        int total_len = nums1.size() + nums2.size();
        
        if(total_len & 0x1){
            res = findLeastKNum(nums1, nums1.size(), nums2, nums2.size(), total_len/2 + 1);
        }
        else{
            res1 =  findLeastKNum(nums1, nums1.size(), nums2, nums2.size(), total_len/2);
            res2 = findLeastKNum(nums1, nums1.size(), nums2, nums2.size(), total_len/2 + 1);
            res = (res1 + res2) / 2;
        }
        return res;
    }
};
