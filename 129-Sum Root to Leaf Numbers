/*
题目大意：给定一个二叉树，节点值为0-9，每条从根到叶子节点的路径代表一个数，计算所有数的和
解题思路：dfs
注意的点：很明显是dfs，一开始写的时候并没有想得太清楚，实际上只有在到达叶子节点时才更新sum，非叶子节点只需更新cur
         另外，注意本题的两种写法，一种是通过传引用，修改sum的值；另一种是将sum声明为全局变量，在函数内部修改sum的值
*/


/*声明为全局变量，在函数内部修改，类似124题*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sum = 0;
    int sumNumbers(TreeNode* root) {
        if(root == NULL) return sum;
        dfs(root, 0);
        return sum;
    }
    void dfs(TreeNode* root, int cur){
        if(root->left == NULL && root->right == NULL){
            sum += (cur * 10 + root->val);
            return;
        }
        if(root->left){
            dfs(root->left, cur * 10 + root->val);
        }
        if(root->right){
            dfs(root->right, cur * 10 + root->val);
        }
    }
};

/*通过传引用修改sum值*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        int sum = 0;
        if(root == NULL) return sum;
        dfs(root, sum, 0);
        return sum;
    }
    void dfs(TreeNode* root, int &sum, int cur){
        if(root->left == NULL && root->right == NULL){
            sum += (cur * 10 + root->val);
            return;
        }
        if(root->left){
            dfs(root->left, sum, cur * 10 + root->val);
        }
        if(root->right){
            dfs(root->right, sum, cur * 10 + root->val);
        }
    }
};
