/*
题目大意：如上题，给定数字n，求出1..n能构成的二叉排序树个数
解题思路：一开始想到以上题的方法递归求解，然而本题并没有TreeNode数据类型，显然不应该用这种方法。使用动态规划解决...
         dp[i]: 1..i能够成的二叉排序树个数，求解dp[n]
         dp[i]: 对于1<=j<=i的每个位置，它把1..i分成三部分1..j-1, j, j+1..i，分别求出左子树和右子树个数，相乘得到当前j所能构成的二叉排序树个数
         初始化: dp[0] = dp[1] = 1
注意的点：注意解题思路，以及i,j的取值范围
*/

class Solution {
public:
    int numTrees(int n) {
        if(n < 2) return 1;
        
        vector<int> dp(n + 1, 0);
        dp[0] = 1, dp[1] = 1;
        for(int i = 2; i <= n; i++){
            for(int j = 1; j <= i; j++){
                dp[i] += dp[j-1] * dp[i-j];
            }
        }
        return dp[n];
    }
};
