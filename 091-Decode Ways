/*
题目大意：把字母A..Z编码为数字1..26，对于给定数字串，求出解码方式共有多少种
解题思路：一开始就想到了动态规划，但是卡在了dp[i]表达式的求解上，后来看了宋狗的答案才明白，求解dp[i]时，要分情况讨论，可能涉及dp[i-1],dp[i-2]。
         dp[i]：s[0..i-1]的解码方式重数，则题目转换为求解dp[m]
         dp[i]：如果s[i-1]==0 && s[i-2]!=1 && s[i-2]!=2，说明数字串不合法，返回0
                否则，求出s[i-1]+10*s[i-2]，即最后两位构成的数字num，
                  如果num<9 || num>26，说明s[i-1]只能作为一位数字单独解码
                  如果num==10 || num==20，说明s[i-1]只能和s[i-2]一起解码
                  否则，s[i-1]即可以单独解码，也可以与s[i-2]一起解码
注意的点：1.注意dp[i]的求解
         2.注意dp[0]初始化为1，而非0
         3.注意不合法情况判断
*/

class Solution {
public:
    int numDecodings(string s) {
        if(s.size() == 0) return 0;
        
        int m = s.size();
        vector<int> dp(m + 1, 0);
        dp[0] = 1;
        dp[1] = 1;
        
        if(s[0] == '0') return 0;
        
        for(int i = 2; i <= m; i++){
            if(s[i-1] == '0' && s[i-2] != '1' && s[i-2] != '2') return 0;
            
            int num = (s[i-2] - '0') * 10 + (s[i-1] - '0');
            if(num <= 9 || num >26) 
                dp[i] = dp[i-1];
            else if(num == 10 || num == 20) 
                dp[i] = dp[i-2];
            else
                dp[i] = dp[i-1] + dp[i-2];
        }
        
        return dp[m];
    }
};
