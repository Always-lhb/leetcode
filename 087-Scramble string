/*
题目大意：每个字符串都可以看作由二叉树构成，交换二叉树的两个节点就得到该字符串的一个scramble string。求给定的两个字符串s1,s2是否是scramble string
解题思路：如果s1==s2则返回true；如果s1和s2中各字符出现次数不同，则返回true，否则，
         把s1,s2分别划分成两部分，a1,a2和b1,b2，如果a1&b1满足条件且a2&b2满足条件，则返回true；如果a1&b2满足条件且a2&b1满足条件，也返回true，否则说明
         双方不是scramble string。
注意的点：划分的位置从下标1..s1.size()-1，因为从下标0交换与原本字符串一样
*/

class Solution {
public:
    bool isScramble(string s1, string s2) {
        if(s1 == s2) return true;
        
        unordered_map<char, int> dict;
        for(auto c : s1){
            dict[c]++;
        }
        for(auto c : s2){
            dict[c]--;
            if(dict[c] < 0){
                return false;
            }
        }
        
        for(int i = 1; i < s1.size(); i++){
            if(isScramble(s1.substr(0, i), s2.substr(0, i)) && isScramble(s1.substr(i), s2.substr(i)))
                return true;
            if(isScramble(s1.substr(0, i), s2.substr(s2.size() - i)) && isScramble(s1.substr(i), s2.substr(0, s2.size() - i)))
                return true;
        }
        return false;
    }
};
