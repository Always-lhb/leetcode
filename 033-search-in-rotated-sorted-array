/*
题目大意：给定一个数组，它是升序数组在某个位置旋转所得，即012345在3旋转得到345012...返回给定target在数组里的下标
解题思路：对于Sorted Array的查找，一定是二分法
  采用yyp的方法，即初始化low=0,high=nums.size()-1,mid=(low+high)/2，如果nums[mid]=target则命中返回；否则mid的左右序列必定有一个是有序的；
  如果nums[mid]<=nums[high]，说明从mid..high是有序的，此时如果target位于mid-high，则low=mid+1,否则high=mid-1;
  如果nums[mid]>=nums[low],说明从low..mid是有序的，此时如果target位于low-mid，则high=mid-1,否则low=mid+1。
*/

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1, mid;
        while(low <= high){ // while low=high, mid=low=high
            mid = (low + high) / 2;
            if(nums[mid] == target) return mid;
            else if(nums[mid] <= nums[high]){ // mid..high sorted
                if(target > nums[mid] && target <= nums[high]){
                    low = mid + 1;
                }
                else{
                    high = mid - 1;
                }
            }
            else if(nums[mid] >= nums[low]){ // low..mid sorted
                if(target < nums[mid] && target >= nums[low]){
                    high = mid - 1;
                }
                else{
                    low = mid + 1;
                }
            }
        }
        return -1;
    }
};



/*
做到81题时，发现之前对此处的有序判断理解并不对，只不过因为原数组无重复元素，所以此题才通过。
实际上，判断是否有序，只通过nums[mid]与nums[high]比较即可；
由于本题数组无重复元素，故可以直接把'='放入判断条件一，否则需要把'='单独提出进行考虑，详见第81题
*/
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low = 0, high = nums.size() - 1, mid;
        while(low <= high){ // while low=high, mid=low=high
            mid = (low + high) / 2;
            if(nums[mid] == target) return mid;
            else if(nums[mid] <= nums[high]){ // mid..high sorted
                if(target > nums[mid] && target <= nums[high]){
                    low = mid + 1;
                }
                else{
                    high = mid - 1;
                }
            }
            else{ // low..mid sorted
                if(target < nums[mid] && target >= nums[low]){
                    high = mid - 1;
                }
                else{
                    low = mid + 1;
                }
            }
        }
        return -1;
    }
};
