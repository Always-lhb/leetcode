/*
题目大意：给定一个升序数组和target，返回target在数组内的起始和结束位置。要求时间复杂度为O(logn)
解题思路：很显然是二分法，命中后，通过两个下标分别向前向后扫描数组，返回起始和结束下标
tips:一开始想的复杂了，以为二分法命中后，不能再通过循环去查找下标，源于对时间复杂度求解掌握的不够
*/

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> res(2, -1);
        if(nums.size() < 1) return res;
        
        int low = 0, high = nums.size() - 1, mid;
        while(low <= high){
            mid = (low + high) / 2;
            
            if(nums[mid] < target)
                low = mid + 1;
            else if(nums[mid] > target)
                high = mid - 1;
            else{ //hit
                int i = mid, j = mid + 1;
                while(i >= 0 && nums[i] == target) i--;
                while(j <= nums.size() - 1 && nums[j] == target) j++;
                
                res[0] = i + 1;
                res[1] = j - 1;
                return res;
            }
        }
        return res;
    }
};
