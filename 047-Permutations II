/*
题目大意：给定可能包含重复值的序列，求出所有可能的字典序
解题思路：与上一题几乎一样，多了重复元素的判断，为了判断重复元素，这里加入对nums的排序，使重复元素近邻
*/


class Solution {
public:
    void dfs(vector<vector<int>>& res, vector<int>& tmp, vector<int>& nums, vector<bool>& used){
        if(tmp.size() == nums.size()){
            res.push_back(tmp);
            return;
        }
        for(int i = 0; i < nums.size(); i++){
            if(!used[i]){
                used[i] = true;
                tmp.push_back(nums[i]);
                dfs(res, tmp, nums, used);
                tmp.pop_back();
                used[i] = false;
                
                while(nums[i+1] == nums[i]) i++; //去重操作在对nums[i]处理之后执行！！！很容易相通
            }
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> tmp;
        vector<bool> used(nums.size(), false);
        
        sort(nums.begin(), nums.end());
        dfs(res, tmp, nums, used);
        return res;
    }
};


/*
第二次做比较顺利，注意去重的位置和写法
*/
class Solution {
public:
    void dfs(vector<vector<int>>& res, vector<int>& cur, vector<int>& nums, vector<bool>& used){
        if(cur.size() == nums.size()){
            res.push_back(cur);
            return;
        }
        for(int i = 0; i < used.size(); i++){
            if(!used[i]){
                cur.push_back(nums[i]);
                used[i] = true;
                dfs(res, cur, nums, used);
                cur.pop_back();
                used[i] = false;
                while(nums[i+1] == nums[i]) i++;
            }
        }
    }
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> cur;
        vector<bool> used(nums.size(), false);
        
        if(nums.size() < 1) return res;
        
        sort(nums.begin(), nums.end());
        dfs(res, cur, nums, used);
        return res;
    }
};
