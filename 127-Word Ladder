/*
题目大意：与上题基本一致，更为简单。只需要返回最短路径长度即可
解题思路：BFS。一开始我的想法是，声明一个队列，利用BFS求解，类似二叉树的层次遍历，unordered_set<string>visited存储已访问的字符串。在q非空的情况下
         循环求解，但是一直超时，三位大神做法也是如此...
         后来，在网上找到一个ac代码，发现它声明的unordered_set<string>visited存储未被访问的字符串，过了，不懂啊...
注意的点：这题是个坑啊...
*/

/*AC代码*/
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        int res = 1;
        queue<string> q;
        unordered_set<string> visited;
        for(auto s : wordList) visited.insert(s);
        
        q.push(beginWord);
        visited.erase(beginWord);
        while(!q.empty()){
            int len = q.size(); //本层元素个数
            for(int i = 0; i < len; i++){
                string tmp = q.front();
                q.pop();
                if(tmp == endWord) return res;
                
                for(int j = 0; j < tmp.size(); j++){
                    char c = tmp[j];
                    for(char ch = 'a'; ch <= 'z'; ch++){
                        tmp[j] = ch;
                        if(visited.find(tmp) != visited.end()){
                            q.push(tmp);
                            visited.erase(tmp);
                        }
                    }
                    tmp[j] = c;
                }
            }
            res++;
        }
        return 0;
    }
};

/*我的原始代码，超时...*/
class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        int res = 1;
        queue<string> q;
        unordered_set<string> visited;
        
        q.push(beginWord);
        visited.insert(beginWord);
        while(!q.empty()){
            int len = q.size();
            for(int i = 0; i < len; i++){
                string tmp = q.front();
                q.pop();
                if(tmp == endWord) return res;
                
                for(int j = 0; j < tmp.size(); j++){
                    char c = tmp[j];
                    for(char ch = 'a'; ch <= 'z'; ch++){
                        tmp[j] = ch;
                        if(find(wordList.begin(), wordList.end(), tmp) != wordList.end() && visited.find(tmp) == visited.end()){
                            q.push(tmp);
                            visited.insert(tmp);
                        }
                    }
                    tmp[j] = c;
                }
            }
            res++;
        }
        return 0;
    }
};
