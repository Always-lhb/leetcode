/*
题目大意：给定起始字符串beginWord，终止字符串endWord，和字典wordList；每次允许改变一个字符，求出从beginWord过渡到endWord的所有最短路径
解题思路：
         1.利用DFS求出所有可能的路径，然后选出最短的返回。超时
         2.看了老宋他们的解法，利用BFS广度遍历字典，找到字典里每个字符串的层次，再利用DFS从后往前构造路径。超时......
         3.把vector改为set之后可以ac，大概是因为vector的查找复杂度较高
注意的点：
         1.unordered_map
         2.unordered_set
         3.BFS类似于二叉树的层次遍历，需要借助queue
*/
 
class Solution {
public:
    void getPath(vector<vector<string>>& res, unordered_map<string, vector<string>>& pa, string cur, vector<string>& path){
        if(pa.find(cur) == pa.end()){ // cur:last word in path
            res.push_back(vector<string>(path.rbegin(), path.rend()));
            return;
        }
        
        for(auto s : pa[cur]){
            path.push_back(s);
            getPath(res, pa, s, path);
            path.pop_back();
        }
    }
    vector<vector<string>> findLadders(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> wordDict;
        for(auto s : wordList) wordDict.insert(s);
        
        vector<vector<string>> res;
        unordered_map<string, vector<string>> pa;
        unordered_set<string> visited;
        queue<string> q;
        
        q.push(beginWord);
        visited.insert(beginWord);
        
        while(!q.empty()){
            int len = q.size(); // current level size
            unordered_map<string, vector<string>> newPa; //存储当前层次字符串的父亲节点
            for(int i = 0; i < len; i++){ // every current level word
                string cur = q.front();
                q.pop();
                if(cur == endWord){ // goto DFS
                    vector<string> path;
                    path.push_back(cur);
                    getPath(res, pa, cur, path);
                    break;
                }
                string pre = cur;
                for(int j = 0; j < cur.size(); j++){
                    char old = cur[j];
                    for(char c = 'a'; c <= 'z'; c++){
                        cur[j] = c;
                        if(wordDict.find(cur) == wordDict.end() || visited.find(cur) != visited.end())
                            continue;
                         //第一次在当前层次找到cur的父节点，则加入队列，否则说明已在当前层找到过cur的父节点，不需要重复入栈
                        if(newPa.find(cur) == newPa.end())
                            q.push(cur);
                        newPa[cur].push_back(pre);
                    }
                    cur[j] = old;
                }
            }
            for(auto a : newPa){
                pa.insert(a); //把当前层次的结果添加入总结果！！！
                visited.insert(a.first);
            }
        }
        return res;
    }
};
