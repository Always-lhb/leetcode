/*
题目大意：给一个字符串，和一堆等长度的单词。在字符串中找出所有单词组成的字串的位置。
解题思路：
  1.通过“回溯法”求出所有单词能够组成的所有字符串，然后在给定字符串中查找位置。思路没问题，但是超时了...
  2.综合了各种方法，还是DISCUSS里的最好：利用map存储words里每个word应该出现的次数，然后对可能的起始位置遍历，利用map2存储从该位置出发，实际上
  每个word出现的次数；如果得到的word不在map里或者word出现的次数过多，说明此位置不满足条件
*/


class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        unordered_map<string, int> counts;
        for(int i = 0; i < words.size(); i++){
            counts[words[i]]++;
        }
        
        vector<int> res;
        int n = s.size(), num = words.size(), len = words[0].size();
        for(int i = 0; i < n - num*len + 1; i++){
            unordered_map<string, int> seen;
            int j = 0;
            for(; j < num; j++){ // for each word
                string word = s.substr(i + j * len, len);
                if(counts.find(word) != counts.end()){
                    seen[word]++;
                    if(seen[word] > counts[word]){ // too many times
                        break;
                    }
                }
                else // unexpected word
                    break;
            }
            if(j == num){ // for each word, exactly occur the time needed
                res.push_back(i);
            }
        }
        return res;
    }
};  


/*
第二次做，神奇的一次AC，哈哈
*/
class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> res;
        if(s.size() == 0) return res;
        
        unordered_map<string, int> dict;
        for(auto w : words) dict[w]++;
        
        int count = words.size(), len = words[0].size();
        for(int i = 0; i < s.size()-count*len+1; i++){ //对每个合法位置遍历
            unordered_map<string, int> mydict(dict);
            for(int j = i; j < s.size(); j+=len){
                string word = s.substr(j, len);
                if(mydict.find(word) != mydict.end() && mydict[word] > 0){ //合法字
                    mydict[word]--;
                    if(mydict[word] == 0) mydict.erase(word);
                }
                else break;
            }
            if(mydict.empty()) res.push_back(i); //合法位置
        }
        return res;
    }
};
