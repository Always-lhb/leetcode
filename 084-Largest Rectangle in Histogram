/*
题目大意：给定由非负整数构成的数组，数组元素代表高度，求所给数组形成的最大矩形面积
解题思路：思路一，遍历数组，求出当前元素i与之后所有元素能构成的最大矩形面积，超时
         思路二，利用栈stack。栈内保存所有高度递增的下标，即当栈为空或栈顶元素对应高度小于当前高度时，入栈；否则，不断出栈直到栈顶元素对应高度
                小于当前高度，过程中不断计算栈顶元素与当前位置所构成的矩阵面积。
注意的点：这道题思路确实很难想，最好多练习并记忆。
         1.注意要给heights在末尾填入0
         2.如果出栈后stack为空，说明栈顶元素是数组中高度最小的值，这时它的宽度是i
*/

class Solution {
public:
    int largestRectangleArea(vector<int>& heights) {
        int maxArea = 0;
        stack<int> st;
        
        heights.push_back(0); //不要忘记给heights放入0，以便在最后时将所有栈内元素出栈
        for(int i = 0; i < heights.size(); i++){
            if(st.empty() || heights[st.top()] <= heights[i]){
                st.push(i);
            }
            else{
                while(!st.empty() && heights[st.top()] > heights[i]){
                    int tmp = heights[st.top()];
                    st.pop();
                    int x = st.empty() ? i : i - st.top() - 1; //tips
                    if(x * tmp > maxArea){
                        maxArea = x * tmp;
                    }
                }
                st.push(i);
            }
        }
        return maxArea;
    }
};
