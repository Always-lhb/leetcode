/*
题目大意：对给定vector<int> nums和target，返回nums中的a,b,c，使得a+b+c最接近target；假设只有一组，不需去重。
解题思路：与上一题类似，排序+卡尺法
*/

class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int res;
        
        if(nums.size() < 3)
            return res;
        if(nums.size() == 3)
            return (nums[0]+nums[1]+nums[2]);
        
        sort(nums.begin(), nums.end());
        
        res = nums[0]+nums[1]+nums[2];
        
        for(int i = 0; i < nums.size()-2; i++){ //first num
            int left = i+1, right = nums.size()-1;
            
            while(left < right){
                int tmp = nums[i] + nums[left] + nums[right];
                
                if(tmp == target){
                    return target;
                }
                if(abs(tmp-target) < abs(res-target)){
                    res = tmp;
                }
                if(tmp < target)
                    left++;
                else
                    right--;
            }
        }
        return res;
    }
};


/*
第二次做，很顺利。排序+卡尺法
*/
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int dist = INT_MAX, res = INT_MAX;
        
        sort(nums.begin(), nums.end());
        for(int i = 0; i < nums.size() - 2; i++){
            int l = i + 1, r = nums.size() - 1;
            while(l < r){
                int tmp = nums[i] + nums[l] + nums[r];
                if(tmp == target) return target;
                if(abs(tmp-target) < dist){
                    dist = abs(tmp-target);
                    res = tmp;
                }
                
                if(tmp < target) l++;
                else r--;
            }
        }
        return res;
    }
};
