144. 先序遍历
  /*递归解法*/
  class Solution {
  public:
      void preorder(vector<int>& res, TreeNode* root){
          res.push_back(root->val);
          if(root->left) preorder(res, root->left);
          if(root->right) preorder(res, root->right);
      }
      vector<int> preorderTraversal(TreeNode* root) {
          vector<int> res;
          if(root == NULL) return res;

          preorder(res, root);
          return res;
      }
  };

  /*非递归解法*/
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> st;
        if(root == NULL) return res;

        TreeNode *cur = root;
        while(cur || !st.empty()){
            if(cur){
                res.push_back(cur->val);
                st.push(cur->right);
                cur = cur->left;
            }
            else{ //此时当前节点与它的左子树都已访问完毕，且栈内存储的都是右子树，所以直接出栈访问即可
                cur = st.top();
                st.pop();
            }
        }
        return res;
    }

94. 中序遍历
  vector<int> inorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> st;
        TreeNode *cur = root;
        
        while(cur || !st.empty()){
            if(cur){
                st.push(cur);
                cur = cur->left;
            }
            else{
                cur = st.top();
                st.pop();
                res.push_back(cur->val);
                cur = cur->right;
            }
        }
        
        return res;
    }

145. 后序遍历
  vector<int> postorderTraversal(TreeNode* root) {
        vector<int> res;
        stack<TreeNode*> st;
        if(root == NULL) return res;
        
        TreeNode *cur = root;
        TreeNode *pre = NULL; //前一个访问的节点
        while(cur || !st.empty()){
            if(cur){
               st.push(cur);
               cur = cur->left;
            }
            else{ //左子树为空或已访问完毕
                cur = st.top();
                if(cur->right && cur->right != pre){ //如果右子树存在且未访问，则先访问右子树
                    cur = cur->right;
                }
                else{ //左右子树都已访问完毕，则访问当前节点
                    res.push_back(cur->val);
                    pre = cur;
                    cur = NULL; //注意此处，将cur置空使得不进入第一个if内,避免再次入栈
                    st.pop();
                }
                
            }
        }
        return res;
    }
    
102. 层次遍历
  vector<vector<int>> levelOrder(TreeNode* root) {
        queue<TreeNode*> q;
        vector<vector<int>> res;
        
        if(root == NULL) return res;
        
        q.push(root);
        while(!q.empty()){
            vector<int> tmp;
            int len = q.size();
            for(int i = 0; i < len; i++){
                TreeNode *cur = q.front();
                q.pop();
                tmp.push_back(cur->val);
                if(cur->left) q.push(cur->left);
                if(cur->right) q.push(cur->right);
            }
            res.push_back(tmp);
        }
        return res;
    }
    
103. ZigZag层次遍历 利用栈stack。flag作为方向标志位
  vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        stack<TreeNode*> st;
        vector<vector<int>> res;
        bool flag = true;
        
        if(root == NULL) return res;
        
        st.push(root);
        while(!st.empty()){
            vector<int> tmp;
            stack<TreeNode*> st_new;
            while(!st.empty()){
                TreeNode *cur = st.top();
                st.pop();
                tmp.push_back(cur->val);
                if(flag){
                    if(cur->left) st_new.push(cur->left);
                    if(cur->right) st_new.push(cur->right);
                }
                else{
                    if(cur->right) st_new.push(cur->right);
                    if(cur->left) st_new.push(cur->left);
                }
            }
            res.push_back(tmp);
            st = st_new;
            flag = flag == true ? false : true;
        }
        return res;
    }

107. 二叉树层次遍历，要求结果从下往上，即先存储叶子节点所在层，最后存储根节点所在层 首先按照正常层次遍历获取结果，然后reverse即可
  void reverse(vector<vector<int>>& res){
        int l = 0, r = res.size() - 1;
        while(l < r){
            swap(res[l++], res[r--]);
        }
    }
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> res;
        queue<TreeNode*> q;
        if(root == NULL) return res;
        
        q.push(root);
        while(!q.empty()){
            vector<int> tmp;
            int len = q.size();
            for(int i = 0; i < len; i++){
                TreeNode *cur = q.front();
                q.pop();
                tmp.push_back(cur->val);
                if(cur->left) q.push(cur->left);
                if(cur->right) q.push(cur->right);
            }
            res.push_back(tmp);
        }
        reverse(res);
        return res;
    }


105. 先序+中序构造二叉树 先序遍历的首元素是根节点，它把中序遍历序列分割成左右两部分，其中左部分是左子树，右部分是右子树。递归
  TreeNode* build(vector<int>& preorder, vector<int>& inorder, int l1, int r1, int l2, int r2){
        if(l1 > r1) return NULL; //tips 1
        
        TreeNode *root = new TreeNode(preorder[l1]);
        if(l1 == r1) return root;
        
        int i = l2;
        for(; i <= r2; i++){
            if(inorder[i] == preorder[l1])
                break;
        }
        if(i <= r2){ //tips 2
            TreeNode *L = build(preorder, inorder, l1 + 1, l1 + i - l2, l2, i - 1);
            TreeNode *R = build(preorder, inorder, l1 + i - l2 + 1, r1, i + 1, r2);
            root->left = L;
            root->right = R;
        }
        
        return root;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        if(preorder.size() == 0) return NULL;
        return build(preorder, inorder, 0, preorder.size() - 1, 0, inorder.size() - 1);
    }

106. 后序+中序构造二叉树 与上一题一致，把先序的首元素改为后序的尾元素
  TreeNode* build(vector<int>& postorder, vector<int>& inorder, int l1, int r1, int l2, int r2){
        if(l1 > r1) return NULL;
        TreeNode *root = new TreeNode(postorder[r1]);
        if(l1 == r1) return root;
        
        int i = l2;
        for(; i <= r2; i++){
            if(inorder[i] == postorder[r1])
                break;
        }
        
        if(i <= r2){
            TreeNode* L = build(postorder, inorder, l1, l1 + i - l2 - 1, l2, i - 1);
            TreeNode* R = build(postorder, inorder, l1 + i - l2, r1 - 1, i + 1, r2);
            root->left = L;
            root->right = R;
        }
        return root;
    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if(postorder.size() == 0) return NULL;
        return build(postorder, inorder, 0, postorder.size() - 1, 0, inorder.size() - 1);
    }


补充：树的子结构，给定两颗二叉树p,q，判断q是否为p的子结构
思路：第一步，遍历p，查找与q根节点值一样的节点R；第二步，判断以R为根节点的子树是否包含和树q一样的结构。
class Solution {
public:
    bool findTree(TreeNode* p, TreeNode* q){
        if(q == null) return true;
        if(p == null) return false;
        if(p->val != q->val) return false;
        return findTree(p->left, q->left) && findTree(p->right, q->right);
    }
    bool hasSubTree(TreeNode* p, TreeNode* q) {
        bool result = false;
        if(p != null && q != null){
            if(p->val == q->val) 
                result = findTree(p, q);
            if(!result) 
                result = hasSubTree(p->left, q);
            if(!result)
                result = hasSubTree(p->right, q);
        }
        return result;
    }
};
