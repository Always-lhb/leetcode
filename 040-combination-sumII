/*
题目大意：与上一题类似，给定一个集合和目标target，集合里的每个元素只能使用一次，返回所有的结果集合
解题思路：与上一题类似，排序+dfs
tips：本题存在几个需要注意的地方
  1.每个元素只能使用一次，所以回溯时的下标变成i+1
  2.在去重之后，应该有一个判定是否为candidates结尾的判断，否则发生数组越界。神奇的是，本题的所有case在不判断的情况下都能通过，但还是应该注意
*/


class Solution {
public:
    void dfs(vector<vector<int>>& res, vector<int>& tmp, vector<int>& candidates, int remain, int index){
        if(remain == 0){
            res.push_back(tmp);
            return;
        }
        if(remain < candidates[index]) return;
        for(int i = index; i < candidates.size() && candidates[i] <= remain; i++){ //所有合法的下标i
            if(i > index && candidates[i] == candidates[i-1]) continue; //因为candidates有重复，所以去重
            tmp.push_back(candidates[i]);
            dfs(res, tmp, candidates, remain-candidates[i], i+1); //注意与上题区别，每个元素只能用一次，所以放入candidates[i]之后，开始下标为i+1
            tmp.pop_back();
        }
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<vector<int>> res;
        if(candidates.size() < 1) return res;
        
        vector<int>tmp;
        sort(candidates.begin(), candidates.end()); //要排序啊，这样index之后的值才都更大，竟然忘记排序，不应该！
        dfs(res, tmp, candidates, target, 0);
        return res;
    }
};
