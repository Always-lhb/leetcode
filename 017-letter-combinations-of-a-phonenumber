/*
题目大意：对于输入的数字，按照手机键位，返回所有可能的字符串和
解题思路：综合DISCUSS和lbc的解法，果断选择“回溯法”，这个题应该要弄明白
*/

class Solution {
public:
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if(digits.size() < 1)
            return res;
        
        unordered_map<char, string> um;
        um['0'] = "";
        um['1'] = "";
        um['2'] = "abc";
        um['3'] = "def";
        um['4'] = "ghi";
        um['5'] = "jkl";
        um['6'] = "mno";
        um['7'] = "pqrs";
        um['8'] = "tuv";
        um['9'] = "wxyz";
        
        res.push_back("");
        for(int i = 0; i < digits.size(); i++){
            vector<string> tmp;
            string curr = um[digits[i]];
            
            for(int j = 0; j < curr.size(); j++){
                for(int k = 0; k < res.size(); k++){
                    tmp.push_back(res[k] + curr[j]);
                }
            }
            res = tmp;
        }
        return res;
    }
};


/*做到第22题以后，回过头来再看本题，对于回溯法的理解更为深刻，采用递归实现回溯求解，思路如下：
    如果digits.size()=0，说明得到一个解，插入解空间并返回；
    否则的话，得到digits首字符对应的字符串chars，并对chars里的每一位，递归
    一定注意某些变量的地址传递！！
*/


class Solution {
public:
    void dfs(vector<string>& res, string curr, unordered_map<char, string>& um, string digits){ //curr:当前已组字符串 digits:剩余传入字符串
        if(!digits.size()){
            res.push_back(curr);
            return;
        }
        
        string chars = um[digits[0]];
        for(int i = 0; i < chars.size(); i++){
            dfs(res, curr+chars[i], um, digits.substr(1));
        }
    }
    
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if(digits.size() == 0)
            return res;
            
        unordered_map<char, string>um;
        um['0'] = "";
        um['1'] = "";
        um['2'] = "abc";
        um['3'] = "def";
        um['4'] = "ghi";
        um['5'] = "jkl";
        um['6'] = "mno";
        um['7'] = "pqrs";
        um['8'] = "tuv";
        um['9'] = "wxyz";
        
        dfs(res, "", um, digits);
        return res;
    }
};


/*
第二次做，很顺利。dfs
*/
class Solution {
public:
    void dfs(vector<string>& res, string cur, string digits, int pos, unordered_map<char, string> dict){
        if(pos == digits.size()){
            res.push_back(cur);
            return;
        }
        string tmp = dict[digits[pos]];
        for(int i = 0; i < tmp.size(); i++){
            cur += tmp[i];
            dfs(res, cur, digits, pos+1, dict);
            cur.pop_back();
        }
    }
    vector<string> letterCombinations(string digits) {
        vector<string> res;
        if(digits.size() == 0) return res;
        
        unordered_map<char, string> dict;
        dict['0'] = "";
        dict['1'] = "";
        dict['2'] = "abc";
        dict['3'] = "def";
        dict['4'] = "ghi";
        dict['5'] = "jkl";
        dict['6'] = "mno";
        dict['7'] = "pqrs";
        dict['8'] = "tuv";
        dict['9'] = "wxyz";
        
        dfs(res, "", digits, 0, dict);
        return res;
    }
};
